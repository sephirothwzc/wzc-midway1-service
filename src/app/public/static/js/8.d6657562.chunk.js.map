{
  "version": 3,
  "sources": [
    "components/router/save.tsx",
    "views/router/item.tsx",
    "generator/financial-system.operation.ts",
    "utils/antd-helper.tsx",
    "data/static.ts"
  ],
  "names": [
    "Save",
    "props",
    "t",
    "useTranslation",
    "useRouterMutation",
    "save",
    "useImmer",
    "data",
    "parentId",
    "pid",
    "setPid",
    "refetch",
    "useFindRouteByParentIdQuery",
    "skip",
    "treeData",
    "setTreeData",
    "treeDataQuery",
    "useFindRouteTopQuery",
    "loading",
    "draft",
    "routerAll",
    "map",
    "p",
    "value",
    "toString",
    "id",
    "title",
    "displayTxt",
    "handleFinish",
    "values",
    "a",
    "variables",
    "param",
    "then",
    "result",
    "success",
    "catch",
    "gqlErrorMessage",
    "handleLoadData",
    "dataNode",
    "child",
    "style",
    "padding",
    "onFinish",
    "initialValues",
    "undefined",
    "Group",
    "name",
    "label",
    "valueEnum",
    "APP_NAME",
    "placeholder",
    "Format",
    "rules",
    "required",
    "message",
    "width",
    "tooltip",
    "fieldProps",
    "maxLength",
    "Item",
    "allowClear",
    "dropdownStyle",
    "maxHeight",
    "overflow",
    "onChange",
    "labelList",
    "nothing",
    "loadData",
    "listToTree",
    "item",
    "match",
    "useRouteMatch",
    "useFindRouterQuery",
    "params",
    "get",
    "router",
    "defaultOptions",
    "AppUserRoleAppUserIdFragmentDoc",
    "gql",
    "AppUserFragmentDoc",
    "AppUserOnlyFragmentDoc",
    "RoleGroupFragmentDoc",
    "RoleGroupItemRoleGroupIdFragmentDoc",
    "RoleGroupManageFragmentDoc",
    "RoleFragmentDoc",
    "AppUserRoleTypeIdFragmentDoc",
    "RoleManageFragmentDoc",
    "RouterRoleFragmentDoc",
    "RouterFragmentDoc",
    "AppUserRoleDestroyByIdDocument",
    "useAppUserRoleDestroyByIdMutation",
    "baseOptions",
    "options",
    "Apollo",
    "AppUserRoleDestroyDocument",
    "useAppUserRoleDestroyMutation",
    "AppUserRoleBulkDocument",
    "useAppUserRoleBulkMutation",
    "FindAppUserListDocument",
    "useFindAppUserListQuery",
    "FindAppUserDocument",
    "useFindAppUserQuery",
    "FindAppUserListOnlyDocument",
    "useFindAppUserListOnlyQuery",
    "AppUserDestroyByIdDocument",
    "useAppUserDestroyByIdMutation",
    "AppUserStatusDocument",
    "useAppUserStatusMutation",
    "AppUserDocument",
    "useAppUserMutation",
    "RoleGroupItemDestroyByIdDocument",
    "useRoleGroupItemDestroyByIdMutation",
    "RoleGroupItemDestroyDocument",
    "useRoleGroupItemDestroyMutation",
    "RoleGroupItemBulkDocument",
    "useRoleGroupItemBulkMutation",
    "FindRoleGroupListDocument",
    "useFindRoleGroupListQuery",
    "FindRoleGroupManageListDocument",
    "useFindRoleGroupManageListQuery",
    "FindRoleGroupDocument",
    "useFindRoleGroupQuery",
    "RoleGroupDestroyByIdDocument",
    "useRoleGroupDestroyByIdMutation",
    "RoleGroupDocument",
    "useRoleGroupMutation",
    "FindRoleListDocument",
    "useFindRoleListQuery",
    "FindRoleListManageDocument",
    "useFindRoleListManageQuery",
    "RoleDestroyByIdDocument",
    "useRoleDestroyByIdMutation",
    "FindRoleDocument",
    "useFindRoleQuery",
    "RoleDocument",
    "useRoleMutation",
    "FindRouterRoleListDocument",
    "useFindRouterRoleListQuery",
    "RouterRoleBulkDocument",
    "useRouterRoleBulkMutation",
    "RouterRoleDestroyDocument",
    "useRouterRoleDestroyMutation",
    "FindRouterListDocument",
    "useFindRouterListQuery",
    "FindRouteByParentIdDocument",
    "FindRouteTopDocument",
    "FindRouterDocument",
    "FindRouterAllDocument",
    "useFindRouterAllQuery",
    "RouterDocument",
    "UpdRouterParentIdDocument",
    "useUpdRouterParentIdMutation",
    "filtersToWhere",
    "keysFilter",
    "whereType",
    "where",
    "forEach",
    "k",
    "keys",
    "filter",
    "includes",
    "isArray",
    "length",
    "whereItem",
    "set",
    "localChange",
    "dataSource",
    "pagination",
    "filters",
    "sorter",
    "fkey",
    "find",
    "source",
    "generatorColumns",
    "documentNode",
    "setColumns",
    "delColumns",
    "stringList",
    "findFragmentDefinition",
    "difference",
    "changeColumns",
    "createColumns",
    "definitionNode",
    "definitions",
    "kind",
    "Error",
    "columns",
    "setState",
    "produce",
    "inc",
    "findIndex",
    "x",
    "key",
    "push",
    "columnsDefault",
    "i18n",
    "dataIndex",
    "columnsTypeDefault",
    "col",
    "isString",
    "proSortToOrder",
    "sort",
    "keystrings",
    "getColumnSearch",
    "refSearchInput",
    "filterDropdown",
    "setSelectedKeys",
    "selectedKeys",
    "confirm",
    "clearFilters",
    "ref",
    "node",
    "e",
    "target",
    "onPressEnter",
    "console",
    "log",
    "marginBottom",
    "display",
    "type",
    "onClick",
    "icon",
    "size",
    "closeDropdown",
    "filterIcon",
    "filtered",
    "color",
    "onFilterDropdownVisibleChange",
    "visible",
    "setTimeout",
    "select",
    "render",
    "text",
    "highlightStyle",
    "backgroundColor",
    "searchWords",
    "autoEscape",
    "textToHighlight",
    "error",
    "networkError"
  ],
  "mappings": "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",
  "file": "static/js/8.d6657562.chunk.js",
  "sourcesContent": [
    "import {\n  Maybe,\n  RoleGroupSaveIn,\n  Router,\n  RouterFragment,\n} from '../../generator/financial-system';\nimport ProForm, { ProFormText, ProFormSelect } from '@ant-design/pro-form';\nimport { useTranslation } from 'react-i18next';\nimport Format from 'string-format';\nimport { FC } from 'react';\nimport {\n  useFindRouteByParentIdQuery,\n  useFindRouteTopQuery,\n  useRouterMutation,\n} from '../../generator/financial-system.operation';\nimport { message, TreeSelect, Spin } from 'antd';\nimport { gqlErrorMessage } from '../../utils/antd-helper';\nimport { toString } from 'lodash';\nimport { useImmer } from 'use-immer';\nimport { nothing } from 'immer';\nimport listToTree from 'l2t';\nimport { APP_NAME } from '../../data/static';\n\ninterface IRouterSaveProp {\n  data?: Maybe<RouterFragment>;\n}\n\nconst Save: FC<IRouterSaveProp> = (props) => {\n  const { t } = useTranslation();\n\n  const [save] = useRouterMutation();\n\n  const [pid, setPid] = useImmer(props.data?.parentId);\n\n  const { refetch } = useFindRouteByParentIdQuery({\n    skip: true,\n  });\n\n  const [treeData, setTreeData] = useImmer<\n    Maybe<\n      Array<\n        Maybe<{\n          value: string;\n          title: string;\n          parentId?: string;\n        }>\n      >\n    >\n  >(null);\n\n  const treeDataQuery = useFindRouteTopQuery();\n  if (treeDataQuery.loading) {\n    return <Spin />;\n  }\n\n  treeData === null &&\n    setTreeData((draft) => {\n      return treeDataQuery.data?.routerAll?.map((p) => ({\n        value: toString(p?.id),\n        title: toString(p?.displayTxt),\n        parentId: '0',\n      }));\n    });\n\n  /**\n   * 提交\n   */\n  const handleFinish = async (values: RoleGroupSaveIn) =>\n    save({\n      variables: {\n        param: {\n          id: props.data?.id,\n          parentId: pid,\n          ...values,\n        },\n      },\n    })\n      .then((result) => {\n        message.success(`${t('finish')}${t('success')}`);\n      })\n      .catch(gqlErrorMessage);\n\n  /**\n   * 异步加载数据\n   * @param param0\n   */\n  const handleLoadData = async (dataNode: any) => {\n    return await refetch({\n      parentId: dataNode.value,\n    }).then((result) => {\n      const child =\n        result.data.routerAll?.map((p) => ({\n          value: toString(p?.id),\n          parentId: toString(p?.parentId),\n          title: toString(p?.displayTxt),\n        })) || [];\n\n      setTreeData((draft) => {\n        return [...(draft || []), ...child];\n      });\n    });\n  };\n\n  return (\n    <div\n      style={{\n        padding: 24,\n      }}\n    >\n      <ProForm<Router>\n        onFinish={handleFinish}\n        initialValues={props?.data || undefined}\n      >\n        <ProForm.Group>\n          <ProFormSelect\n            name=\"appName\"\n            label={t('appName')}\n            valueEnum={APP_NAME}\n            placeholder={Format(t('pleaseSelect'))}\n            rules={[\n              {\n                required: true,\n                message: Format(t('pleaseSelect'), t('appName')),\n              },\n            ]}\n            width=\"sm\"\n          />\n          <ProFormText\n            name=\"displayCode\"\n            label={t('displayCode')}\n            tooltip={Format(t('rule.maxLength'), '100')}\n            placeholder={Format(t('pleaseInput'))}\n            rules={[\n              {\n                required: true,\n                message: Format(t('pleaseInput')),\n              },\n            ]}\n            fieldProps={{\n              maxLength: 100,\n            }}\n          />\n          <ProFormText\n            name=\"displayTxt\"\n            label={t('displayTxt')}\n            placeholder={Format(t('pleaseInput'))}\n          />\n          <ProFormText\n            name=\"routerCode\"\n            label={t('routerCode')}\n            placeholder={Format(t('pleaseInput'))}\n            rules={[\n              {\n                required: true,\n                message: Format(t('pleaseInput')),\n              },\n            ]}\n          />\n          <ProFormText\n            name=\"routerName\"\n            label={t('routerName')}\n            placeholder={Format(t('pleaseInput'))}\n            rules={[\n              {\n                required: true,\n                message: Format(t('pleaseInput')),\n              },\n            ]}\n          />\n          <ProForm.Item label={t('parentId')} name=\"parentId\">\n            <TreeSelect\n              allowClear={true}\n              value={pid || undefined}\n              dropdownStyle={{ maxHeight: 800, overflow: 'auto' }}\n              placeholder=\"Please select\"\n              onChange={(value, labelList) => {\n                setPid((draft) => value || (nothing as any));\n              }}\n              loadData={handleLoadData}\n              treeData={\n                treeData &&\n                (listToTree(\n                  treeData,\n                  'value',\n                  'parentId',\n                  'children',\n                  (item) => ({\n                    value: item?.value,\n                    title: item?.title,\n                    parentId: item?.parentId,\n                  })\n                ) as any)\n              }\n            />\n          </ProForm.Item>\n          <ProFormText\n            name=\"remark\"\n            label={t('remark')}\n            placeholder={Format(t('pleaseInput'))}\n          />\n        </ProForm.Group>\n      </ProForm>\n    </div>\n  );\n};\n\nexport default Save;\n",
    "import { Spin } from 'antd';\nimport { FC } from 'react';\nimport { useFindRouterQuery } from '../../generator/financial-system.operation';\nimport { useRouteMatch } from 'react-router-dom';\nimport Save from '../../components/router/save';\nimport { get } from 'lodash';\nimport { RouterFragment } from '../../generator/financial-system';\n\nconst Item: FC = () => {\n  const match = useRouteMatch();\n  const { data, loading } = useFindRouterQuery({\n    variables: match.params as { id: string },\n    skip: !get(match, 'params.id'),\n  });\n\n  if (loading) {\n    return <Spin />;\n  }\n  return <Save data={data?.router as RouterFragment}></Save>;\n};\n\nexport default Item;\n",
    "import * as SchemaTypes from './financial-system';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\nexport const AppUserRoleAppUserIdFragmentDoc = gql`\n  fragment AppUserRoleAppUserId on AppUserRole {\n    id\n    roleType\n    typeId\n    typeIdModel {\n      __typename\n      ... on Role {\n        name: roleName\n        code: roleCode\n      }\n      ... on RoleGroup {\n        name: groupName\n        code: groupCode\n      }\n    }\n  }\n`;\nexport const AppUserFragmentDoc = gql`\n  fragment AppUser on AppUser {\n    id\n    userName\n    nickName\n    realName\n    userGender\n    phone\n    avatarUrl\n    appUserStatus\n    createdAt\n    appUserRoleAppUserId {\n      ...AppUserRoleAppUserId\n    }\n  }\n  ${AppUserRoleAppUserIdFragmentDoc}\n`;\nexport const AppUserOnlyFragmentDoc = gql`\n  fragment AppUserOnly on AppUser {\n    id\n    userName\n    nickName\n    realName\n    userGender\n    phone\n    appUserStatus\n    createdAt\n  }\n`;\nexport const RoleGroupFragmentDoc = gql`\n  fragment RoleGroup on RoleGroup {\n    id\n    appName\n    groupCode\n    groupName\n  }\n`;\nexport const RoleGroupItemRoleGroupIdFragmentDoc = gql`\n  fragment RoleGroupItemRoleGroupId on RoleGroupItem {\n    id\n    roleIdObj {\n      id\n      roleCode\n      roleName\n    }\n  }\n`;\nexport const RoleGroupManageFragmentDoc = gql`\n  fragment RoleGroupManage on RoleGroup {\n    id\n    groupCode\n    groupName\n    createdAt\n    remark\n    roleGroupItemRoleGroupId {\n      ...RoleGroupItemRoleGroupId\n    }\n  }\n  ${RoleGroupItemRoleGroupIdFragmentDoc}\n`;\nexport const RoleFragmentDoc = gql`\n  fragment Role on Role {\n    id\n    appName\n    roleCode\n    roleName\n  }\n`;\nexport const AppUserRoleTypeIdFragmentDoc = gql`\n  fragment appUserRoleTypeId on AppUserRole {\n    id\n    appUserId\n    appUserIdObj {\n      userName\n      nickName\n      phone\n    }\n  }\n`;\nexport const RoleManageFragmentDoc = gql`\n  fragment RoleManage on Role {\n    id\n    appName\n    roleCode\n    roleName\n    createdAt\n    remark\n    appUserRoleTypeId {\n      ...appUserRoleTypeId\n    }\n  }\n  ${AppUserRoleTypeIdFragmentDoc}\n`;\nexport const RouterRoleFragmentDoc = gql`\n  fragment RouterRole on RouterRole {\n    id\n    appName\n    authState\n    roleId\n    routerId\n  }\n`;\nexport const RouterFragmentDoc = gql`\n  fragment Router on Router {\n    id\n    appName\n    displayCode\n    displayTxt\n    parentId\n    remark\n    routerCode\n    routerName\n    createdAt\n  }\n`;\nexport const AppUserRoleDestroyByIdDocument = gql`\n  mutation appUserRoleDestroyById($id: String!) {\n    appUserRoleDestroyById(id: $id)\n  }\n`;\nexport type AppUserRoleDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleDestroyByIdMutation,\n  SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n>;\n\n/**\n * __useAppUserRoleDestroyByIdMutation__\n *\n * To run a mutation, you first call `useAppUserRoleDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleDestroyByIdMutation, { data, loading, error }] = useAppUserRoleDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAppUserRoleDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleDestroyByIdMutation,\n    SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleDestroyByIdMutation,\n    SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n  >(AppUserRoleDestroyByIdDocument, options);\n}\nexport type AppUserRoleDestroyByIdMutationHookResult = ReturnType<\n  typeof useAppUserRoleDestroyByIdMutation\n>;\nexport type AppUserRoleDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleDestroyByIdMutation>;\nexport type AppUserRoleDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleDestroyByIdMutation,\n  SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n>;\nexport const AppUserRoleDestroyDocument = gql`\n  mutation appUserRoleDestroy($where: JSONObject!) {\n    appUserRoleDestroy(where: $where)\n  }\n`;\nexport type AppUserRoleDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleDestroyMutation,\n  SchemaTypes.AppUserRoleDestroyMutationVariables\n>;\n\n/**\n * __useAppUserRoleDestroyMutation__\n *\n * To run a mutation, you first call `useAppUserRoleDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleDestroyMutation, { data, loading, error }] = useAppUserRoleDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAppUserRoleDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleDestroyMutation,\n    SchemaTypes.AppUserRoleDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleDestroyMutation,\n    SchemaTypes.AppUserRoleDestroyMutationVariables\n  >(AppUserRoleDestroyDocument, options);\n}\nexport type AppUserRoleDestroyMutationHookResult = ReturnType<\n  typeof useAppUserRoleDestroyMutation\n>;\nexport type AppUserRoleDestroyMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleDestroyMutation>;\nexport type AppUserRoleDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleDestroyMutation,\n  SchemaTypes.AppUserRoleDestroyMutationVariables\n>;\nexport const AppUserRoleDocument = gql`\n  mutation appUserRole($param: AppUserRoleSaveIn!) {\n    appUserRole(param: $param)\n  }\n`;\nexport type AppUserRoleMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleMutation,\n  SchemaTypes.AppUserRoleMutationVariables\n>;\n\n/**\n * __useAppUserRoleMutation__\n *\n * To run a mutation, you first call `useAppUserRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleMutation, { data, loading, error }] = useAppUserRoleMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserRoleMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleMutation,\n    SchemaTypes.AppUserRoleMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleMutation,\n    SchemaTypes.AppUserRoleMutationVariables\n  >(AppUserRoleDocument, options);\n}\nexport type AppUserRoleMutationHookResult = ReturnType<\n  typeof useAppUserRoleMutation\n>;\nexport type AppUserRoleMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleMutation>;\nexport type AppUserRoleMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleMutation,\n  SchemaTypes.AppUserRoleMutationVariables\n>;\nexport const AppUserRoleBulkDocument = gql`\n  mutation appUserRoleBulk($param: [AppUserRoleSaveIn]!) {\n    appUserRoleBulk(param: $param)\n  }\n`;\nexport type AppUserRoleBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleBulkMutation,\n  SchemaTypes.AppUserRoleBulkMutationVariables\n>;\n\n/**\n * __useAppUserRoleBulkMutation__\n *\n * To run a mutation, you first call `useAppUserRoleBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleBulkMutation, { data, loading, error }] = useAppUserRoleBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserRoleBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleBulkMutation,\n    SchemaTypes.AppUserRoleBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleBulkMutation,\n    SchemaTypes.AppUserRoleBulkMutationVariables\n  >(AppUserRoleBulkDocument, options);\n}\nexport type AppUserRoleBulkMutationHookResult = ReturnType<\n  typeof useAppUserRoleBulkMutation\n>;\nexport type AppUserRoleBulkMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleBulkMutation>;\nexport type AppUserRoleBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleBulkMutation,\n  SchemaTypes.AppUserRoleBulkMutationVariables\n>;\nexport const FindAppUserListDocument = gql`\n  query findAppUserList($param: QueryListParam!) {\n    appUserAll(param: $param) {\n      ...AppUser\n    }\n    appUserCount(param: $param)\n  }\n  ${AppUserFragmentDoc}\n`;\n\n/**\n * __useFindAppUserListQuery__\n *\n * To run a query within a React component, call `useFindAppUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindAppUserListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >(FindAppUserListDocument, options);\n}\nexport function useFindAppUserListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >(FindAppUserListDocument, options);\n}\nexport type FindAppUserListQueryHookResult = ReturnType<\n  typeof useFindAppUserListQuery\n>;\nexport type FindAppUserListLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserListLazyQuery\n>;\nexport type FindAppUserListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserListQuery,\n  SchemaTypes.FindAppUserListQueryVariables\n>;\nexport const FindAppUserDocument = gql`\n  query findAppUser($id: ID!) {\n    appUser(id: $id) {\n      ...AppUser\n    }\n  }\n  ${AppUserFragmentDoc}\n`;\n\n/**\n * __useFindAppUserQuery__\n *\n * To run a query within a React component, call `useFindAppUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindAppUserQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >(FindAppUserDocument, options);\n}\nexport function useFindAppUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >(FindAppUserDocument, options);\n}\nexport type FindAppUserQueryHookResult = ReturnType<typeof useFindAppUserQuery>;\nexport type FindAppUserLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserLazyQuery\n>;\nexport type FindAppUserQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserQuery,\n  SchemaTypes.FindAppUserQueryVariables\n>;\nexport const FindAppUserListOnlyDocument = gql`\n  query findAppUserListOnly($param: QueryListParam!) {\n    appUserAll(param: $param) {\n      ...AppUserOnly\n    }\n    appUserCount(param: $param)\n  }\n  ${AppUserOnlyFragmentDoc}\n`;\n\n/**\n * __useFindAppUserListOnlyQuery__\n *\n * To run a query within a React component, call `useFindAppUserListOnlyQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserListOnlyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserListOnlyQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindAppUserListOnlyQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >(FindAppUserListOnlyDocument, options);\n}\nexport function useFindAppUserListOnlyLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >(FindAppUserListOnlyDocument, options);\n}\nexport type FindAppUserListOnlyQueryHookResult = ReturnType<\n  typeof useFindAppUserListOnlyQuery\n>;\nexport type FindAppUserListOnlyLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserListOnlyLazyQuery\n>;\nexport type FindAppUserListOnlyQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserListOnlyQuery,\n  SchemaTypes.FindAppUserListOnlyQueryVariables\n>;\nexport const AppUserDestroyByIdDocument = gql`\n  mutation appUserDestroyById($id: String!) {\n    appUserDestroyById(id: $id)\n  }\n`;\nexport type AppUserDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserDestroyByIdMutation,\n  SchemaTypes.AppUserDestroyByIdMutationVariables\n>;\n\n/**\n * __useAppUserDestroyByIdMutation__\n *\n * To run a mutation, you first call `useAppUserDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserDestroyByIdMutation, { data, loading, error }] = useAppUserDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAppUserDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserDestroyByIdMutation,\n    SchemaTypes.AppUserDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserDestroyByIdMutation,\n    SchemaTypes.AppUserDestroyByIdMutationVariables\n  >(AppUserDestroyByIdDocument, options);\n}\nexport type AppUserDestroyByIdMutationHookResult = ReturnType<\n  typeof useAppUserDestroyByIdMutation\n>;\nexport type AppUserDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.AppUserDestroyByIdMutation>;\nexport type AppUserDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserDestroyByIdMutation,\n  SchemaTypes.AppUserDestroyByIdMutationVariables\n>;\nexport const AppUserStatusDocument = gql`\n  mutation appUserStatus($id: ID!, $appUserStatus: String) {\n    appUser(param: { id: $id, appUserStatus: $appUserStatus })\n  }\n`;\nexport type AppUserStatusMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserStatusMutation,\n  SchemaTypes.AppUserStatusMutationVariables\n>;\n\n/**\n * __useAppUserStatusMutation__\n *\n * To run a mutation, you first call `useAppUserStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserStatusMutation, { data, loading, error }] = useAppUserStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      appUserStatus: // value for 'appUserStatus'\n *   },\n * });\n */\nexport function useAppUserStatusMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserStatusMutation,\n    SchemaTypes.AppUserStatusMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserStatusMutation,\n    SchemaTypes.AppUserStatusMutationVariables\n  >(AppUserStatusDocument, options);\n}\nexport type AppUserStatusMutationHookResult = ReturnType<\n  typeof useAppUserStatusMutation\n>;\nexport type AppUserStatusMutationResult = Apollo.MutationResult<SchemaTypes.AppUserStatusMutation>;\nexport type AppUserStatusMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserStatusMutation,\n  SchemaTypes.AppUserStatusMutationVariables\n>;\nexport const AppUserDocument = gql`\n  mutation appUser($param: AppUserSaveIn!) {\n    appUser(param: $param)\n  }\n`;\nexport type AppUserMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserMutation,\n  SchemaTypes.AppUserMutationVariables\n>;\n\n/**\n * __useAppUserMutation__\n *\n * To run a mutation, you first call `useAppUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserMutation, { data, loading, error }] = useAppUserMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserMutation,\n    SchemaTypes.AppUserMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserMutation,\n    SchemaTypes.AppUserMutationVariables\n  >(AppUserDocument, options);\n}\nexport type AppUserMutationHookResult = ReturnType<typeof useAppUserMutation>;\nexport type AppUserMutationResult = Apollo.MutationResult<SchemaTypes.AppUserMutation>;\nexport type AppUserMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserMutation,\n  SchemaTypes.AppUserMutationVariables\n>;\nexport const RoleGroupItemDestroyByIdDocument = gql`\n  mutation roleGroupItemDestroyById($id: String!) {\n    roleGroupItemDestroyById(id: $id)\n  }\n`;\nexport type RoleGroupItemDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemDestroyByIdMutation,\n  SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleGroupItemDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemDestroyByIdMutation, { data, loading, error }] = useRoleGroupItemDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleGroupItemDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemDestroyByIdMutation,\n    SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemDestroyByIdMutation,\n    SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n  >(RoleGroupItemDestroyByIdDocument, options);\n}\nexport type RoleGroupItemDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleGroupItemDestroyByIdMutation\n>;\nexport type RoleGroupItemDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemDestroyByIdMutation>;\nexport type RoleGroupItemDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemDestroyByIdMutation,\n  SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n>;\nexport const RoleGroupItemDestroyDocument = gql`\n  mutation roleGroupItemDestroy($where: JSONObject!) {\n    roleGroupItemDestroy(where: $where)\n  }\n`;\nexport type RoleGroupItemDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemDestroyMutation,\n  SchemaTypes.RoleGroupItemDestroyMutationVariables\n>;\n\n/**\n * __useRoleGroupItemDestroyMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemDestroyMutation, { data, loading, error }] = useRoleGroupItemDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useRoleGroupItemDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemDestroyMutation,\n    SchemaTypes.RoleGroupItemDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemDestroyMutation,\n    SchemaTypes.RoleGroupItemDestroyMutationVariables\n  >(RoleGroupItemDestroyDocument, options);\n}\nexport type RoleGroupItemDestroyMutationHookResult = ReturnType<\n  typeof useRoleGroupItemDestroyMutation\n>;\nexport type RoleGroupItemDestroyMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemDestroyMutation>;\nexport type RoleGroupItemDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemDestroyMutation,\n  SchemaTypes.RoleGroupItemDestroyMutationVariables\n>;\nexport const RoleGroupItemDocument = gql`\n  mutation roleGroupItem($param: RoleGroupItemSaveIn!) {\n    roleGroupItem(param: $param)\n  }\n`;\nexport type RoleGroupItemMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemMutation,\n  SchemaTypes.RoleGroupItemMutationVariables\n>;\n\n/**\n * __useRoleGroupItemMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemMutation, { data, loading, error }] = useRoleGroupItemMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupItemMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemMutation,\n    SchemaTypes.RoleGroupItemMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemMutation,\n    SchemaTypes.RoleGroupItemMutationVariables\n  >(RoleGroupItemDocument, options);\n}\nexport type RoleGroupItemMutationHookResult = ReturnType<\n  typeof useRoleGroupItemMutation\n>;\nexport type RoleGroupItemMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemMutation>;\nexport type RoleGroupItemMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemMutation,\n  SchemaTypes.RoleGroupItemMutationVariables\n>;\nexport const RoleGroupItemBulkDocument = gql`\n  mutation roleGroupItemBulk($param: [RoleGroupItemSaveIn]!) {\n    roleGroupItemBulk(param: $param)\n  }\n`;\nexport type RoleGroupItemBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemBulkMutation,\n  SchemaTypes.RoleGroupItemBulkMutationVariables\n>;\n\n/**\n * __useRoleGroupItemBulkMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemBulkMutation, { data, loading, error }] = useRoleGroupItemBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupItemBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemBulkMutation,\n    SchemaTypes.RoleGroupItemBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemBulkMutation,\n    SchemaTypes.RoleGroupItemBulkMutationVariables\n  >(RoleGroupItemBulkDocument, options);\n}\nexport type RoleGroupItemBulkMutationHookResult = ReturnType<\n  typeof useRoleGroupItemBulkMutation\n>;\nexport type RoleGroupItemBulkMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemBulkMutation>;\nexport type RoleGroupItemBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemBulkMutation,\n  SchemaTypes.RoleGroupItemBulkMutationVariables\n>;\nexport const FindRoleGroupListDocument = gql`\n  query findRoleGroupList($param: QueryListParam!) {\n    roleGroupAll(param: $param) {\n      ...RoleGroup\n    }\n    roleGroupCount(param: $param)\n  }\n  ${RoleGroupFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupListQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleGroupListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >(FindRoleGroupListDocument, options);\n}\nexport function useFindRoleGroupListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >(FindRoleGroupListDocument, options);\n}\nexport type FindRoleGroupListQueryHookResult = ReturnType<\n  typeof useFindRoleGroupListQuery\n>;\nexport type FindRoleGroupListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupListLazyQuery\n>;\nexport type FindRoleGroupListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupListQuery,\n  SchemaTypes.FindRoleGroupListQueryVariables\n>;\nexport const FindRoleGroupManageListDocument = gql`\n  query findRoleGroupManageList($param: QueryListParam!) {\n    roleGroupAll(param: $param) {\n      ...RoleGroupManage\n    }\n    roleGroupCount(param: $param)\n  }\n  ${RoleGroupManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupManageListQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupManageListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupManageListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupManageListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleGroupManageListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >(FindRoleGroupManageListDocument, options);\n}\nexport function useFindRoleGroupManageListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >(FindRoleGroupManageListDocument, options);\n}\nexport type FindRoleGroupManageListQueryHookResult = ReturnType<\n  typeof useFindRoleGroupManageListQuery\n>;\nexport type FindRoleGroupManageListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupManageListLazyQuery\n>;\nexport type FindRoleGroupManageListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupManageListQuery,\n  SchemaTypes.FindRoleGroupManageListQueryVariables\n>;\nexport const FindRoleGroupDocument = gql`\n  query findRoleGroup($id: ID!) {\n    roleGroup(id: $id) {\n      ...RoleGroupManage\n    }\n  }\n  ${RoleGroupManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRoleGroupQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >(FindRoleGroupDocument, options);\n}\nexport function useFindRoleGroupLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >(FindRoleGroupDocument, options);\n}\nexport type FindRoleGroupQueryHookResult = ReturnType<\n  typeof useFindRoleGroupQuery\n>;\nexport type FindRoleGroupLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupLazyQuery\n>;\nexport type FindRoleGroupQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupQuery,\n  SchemaTypes.FindRoleGroupQueryVariables\n>;\nexport const RoleGroupDestroyByIdDocument = gql`\n  mutation roleGroupDestroyById($id: String!) {\n    roleGroupDestroyById(id: $id)\n  }\n`;\nexport type RoleGroupDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupDestroyByIdMutation,\n  SchemaTypes.RoleGroupDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleGroupDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleGroupDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupDestroyByIdMutation, { data, loading, error }] = useRoleGroupDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleGroupDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupDestroyByIdMutation,\n    SchemaTypes.RoleGroupDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupDestroyByIdMutation,\n    SchemaTypes.RoleGroupDestroyByIdMutationVariables\n  >(RoleGroupDestroyByIdDocument, options);\n}\nexport type RoleGroupDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleGroupDestroyByIdMutation\n>;\nexport type RoleGroupDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupDestroyByIdMutation>;\nexport type RoleGroupDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupDestroyByIdMutation,\n  SchemaTypes.RoleGroupDestroyByIdMutationVariables\n>;\nexport const RoleGroupDocument = gql`\n  mutation roleGroup($param: RoleGroupSaveIn!) {\n    roleGroup(param: $param)\n  }\n`;\nexport type RoleGroupMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupMutation,\n  SchemaTypes.RoleGroupMutationVariables\n>;\n\n/**\n * __useRoleGroupMutation__\n *\n * To run a mutation, you first call `useRoleGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupMutation, { data, loading, error }] = useRoleGroupMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupMutation,\n    SchemaTypes.RoleGroupMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupMutation,\n    SchemaTypes.RoleGroupMutationVariables\n  >(RoleGroupDocument, options);\n}\nexport type RoleGroupMutationHookResult = ReturnType<\n  typeof useRoleGroupMutation\n>;\nexport type RoleGroupMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupMutation>;\nexport type RoleGroupMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupMutation,\n  SchemaTypes.RoleGroupMutationVariables\n>;\nexport const FindRoleListDocument = gql`\n  query findRoleList($param: QueryListParam!) {\n    roleAll(param: $param) {\n      ...Role\n    }\n    roleCount(param: $param)\n  }\n  ${RoleFragmentDoc}\n`;\n\n/**\n * __useFindRoleListQuery__\n *\n * To run a query within a React component, call `useFindRoleListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >(FindRoleListDocument, options);\n}\nexport function useFindRoleListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >(FindRoleListDocument, options);\n}\nexport type FindRoleListQueryHookResult = ReturnType<\n  typeof useFindRoleListQuery\n>;\nexport type FindRoleListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleListLazyQuery\n>;\nexport type FindRoleListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleListQuery,\n  SchemaTypes.FindRoleListQueryVariables\n>;\nexport const FindRoleListManageDocument = gql`\n  query findRoleListManage($param: QueryListParam!) {\n    roleAll(param: $param) {\n      ...RoleManage\n    }\n    roleCount(param: $param)\n  }\n  ${RoleManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleListManageQuery__\n *\n * To run a query within a React component, call `useFindRoleListManageQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleListManageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleListManageQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleListManageQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >(FindRoleListManageDocument, options);\n}\nexport function useFindRoleListManageLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >(FindRoleListManageDocument, options);\n}\nexport type FindRoleListManageQueryHookResult = ReturnType<\n  typeof useFindRoleListManageQuery\n>;\nexport type FindRoleListManageLazyQueryHookResult = ReturnType<\n  typeof useFindRoleListManageLazyQuery\n>;\nexport type FindRoleListManageQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleListManageQuery,\n  SchemaTypes.FindRoleListManageQueryVariables\n>;\nexport const RoleDestroyByIdDocument = gql`\n  mutation roleDestroyById($id: String!) {\n    roleDestroyById(id: $id)\n  }\n`;\nexport type RoleDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleDestroyByIdMutation,\n  SchemaTypes.RoleDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleDestroyByIdMutation, { data, loading, error }] = useRoleDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleDestroyByIdMutation,\n    SchemaTypes.RoleDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleDestroyByIdMutation,\n    SchemaTypes.RoleDestroyByIdMutationVariables\n  >(RoleDestroyByIdDocument, options);\n}\nexport type RoleDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleDestroyByIdMutation\n>;\nexport type RoleDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleDestroyByIdMutation>;\nexport type RoleDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleDestroyByIdMutation,\n  SchemaTypes.RoleDestroyByIdMutationVariables\n>;\nexport const FindRoleDocument = gql`\n  query findRole($id: ID!) {\n    role(id: $id) {\n      ...RoleManage\n    }\n  }\n  ${RoleManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleQuery__\n *\n * To run a query within a React component, call `useFindRoleQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRoleQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >(FindRoleDocument, options);\n}\nexport function useFindRoleLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >(FindRoleDocument, options);\n}\nexport type FindRoleQueryHookResult = ReturnType<typeof useFindRoleQuery>;\nexport type FindRoleLazyQueryHookResult = ReturnType<\n  typeof useFindRoleLazyQuery\n>;\nexport type FindRoleQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleQuery,\n  SchemaTypes.FindRoleQueryVariables\n>;\nexport const RoleDocument = gql`\n  mutation role($param: RoleSaveIn!) {\n    role(param: $param)\n  }\n`;\nexport type RoleMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleMutation,\n  SchemaTypes.RoleMutationVariables\n>;\n\n/**\n * __useRoleMutation__\n *\n * To run a mutation, you first call `useRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleMutation, { data, loading, error }] = useRoleMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleMutation,\n    SchemaTypes.RoleMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleMutation,\n    SchemaTypes.RoleMutationVariables\n  >(RoleDocument, options);\n}\nexport type RoleMutationHookResult = ReturnType<typeof useRoleMutation>;\nexport type RoleMutationResult = Apollo.MutationResult<SchemaTypes.RoleMutation>;\nexport type RoleMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleMutation,\n  SchemaTypes.RoleMutationVariables\n>;\nexport const FindRouterRoleListDocument = gql`\n  query findRouterRoleList($param: QueryListParam) {\n    routerRoleAll(param: $param) {\n      ...RouterRole\n    }\n  }\n  ${RouterRoleFragmentDoc}\n`;\n\n/**\n * __useFindRouterRoleListQuery__\n *\n * To run a query within a React component, call `useFindRouterRoleListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterRoleListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterRoleListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterRoleListQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >(FindRouterRoleListDocument, options);\n}\nexport function useFindRouterRoleListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >(FindRouterRoleListDocument, options);\n}\nexport type FindRouterRoleListQueryHookResult = ReturnType<\n  typeof useFindRouterRoleListQuery\n>;\nexport type FindRouterRoleListLazyQueryHookResult = ReturnType<\n  typeof useFindRouterRoleListLazyQuery\n>;\nexport type FindRouterRoleListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterRoleListQuery,\n  SchemaTypes.FindRouterRoleListQueryVariables\n>;\nexport const RouterRoleBulkDocument = gql`\n  mutation routerRoleBulk($param: [RouterRoleSaveIn]!) {\n    routerRoleBulk(param: $param)\n  }\n`;\nexport type RouterRoleBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterRoleBulkMutation,\n  SchemaTypes.RouterRoleBulkMutationVariables\n>;\n\n/**\n * __useRouterRoleBulkMutation__\n *\n * To run a mutation, you first call `useRouterRoleBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterRoleBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerRoleBulkMutation, { data, loading, error }] = useRouterRoleBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRouterRoleBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterRoleBulkMutation,\n    SchemaTypes.RouterRoleBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterRoleBulkMutation,\n    SchemaTypes.RouterRoleBulkMutationVariables\n  >(RouterRoleBulkDocument, options);\n}\nexport type RouterRoleBulkMutationHookResult = ReturnType<\n  typeof useRouterRoleBulkMutation\n>;\nexport type RouterRoleBulkMutationResult = Apollo.MutationResult<SchemaTypes.RouterRoleBulkMutation>;\nexport type RouterRoleBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterRoleBulkMutation,\n  SchemaTypes.RouterRoleBulkMutationVariables\n>;\nexport const RouterRoleDestroyDocument = gql`\n  mutation routerRoleDestroy($where: JSONObject!) {\n    routerRoleDestroy(where: $where)\n  }\n`;\nexport type RouterRoleDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterRoleDestroyMutation,\n  SchemaTypes.RouterRoleDestroyMutationVariables\n>;\n\n/**\n * __useRouterRoleDestroyMutation__\n *\n * To run a mutation, you first call `useRouterRoleDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterRoleDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerRoleDestroyMutation, { data, loading, error }] = useRouterRoleDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useRouterRoleDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterRoleDestroyMutation,\n    SchemaTypes.RouterRoleDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterRoleDestroyMutation,\n    SchemaTypes.RouterRoleDestroyMutationVariables\n  >(RouterRoleDestroyDocument, options);\n}\nexport type RouterRoleDestroyMutationHookResult = ReturnType<\n  typeof useRouterRoleDestroyMutation\n>;\nexport type RouterRoleDestroyMutationResult = Apollo.MutationResult<SchemaTypes.RouterRoleDestroyMutation>;\nexport type RouterRoleDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterRoleDestroyMutation,\n  SchemaTypes.RouterRoleDestroyMutationVariables\n>;\nexport const FindRouterListDocument = gql`\n  query findRouterList($param: QueryListParam) {\n    routerAll(param: $param) {\n      ...Router\n    }\n    routerCount(param: $param)\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterListQuery__\n *\n * To run a query within a React component, call `useFindRouterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterListQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >(FindRouterListDocument, options);\n}\nexport function useFindRouterListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >(FindRouterListDocument, options);\n}\nexport type FindRouterListQueryHookResult = ReturnType<\n  typeof useFindRouterListQuery\n>;\nexport type FindRouterListLazyQueryHookResult = ReturnType<\n  typeof useFindRouterListLazyQuery\n>;\nexport type FindRouterListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterListQuery,\n  SchemaTypes.FindRouterListQueryVariables\n>;\nexport const FindRouteByParentIdDocument = gql`\n  query findRouteByParentId($parentId: String) {\n    routerAll(param: { where: { parentId: $parentId } }) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouteByParentIdQuery__\n *\n * To run a query within a React component, call `useFindRouteByParentIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouteByParentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouteByParentIdQuery({\n *   variables: {\n *      parentId: // value for 'parentId'\n *   },\n * });\n */\nexport function useFindRouteByParentIdQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >(FindRouteByParentIdDocument, options);\n}\nexport function useFindRouteByParentIdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >(FindRouteByParentIdDocument, options);\n}\nexport type FindRouteByParentIdQueryHookResult = ReturnType<\n  typeof useFindRouteByParentIdQuery\n>;\nexport type FindRouteByParentIdLazyQueryHookResult = ReturnType<\n  typeof useFindRouteByParentIdLazyQuery\n>;\nexport type FindRouteByParentIdQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouteByParentIdQuery,\n  SchemaTypes.FindRouteByParentIdQueryVariables\n>;\nexport const FindRouteTopDocument = gql`\n  query findRouteTop {\n    routerAll(param: { where: { parentId: { _is: null } } }) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouteTopQuery__\n *\n * To run a query within a React component, call `useFindRouteTopQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouteTopQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouteTopQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFindRouteTopQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >(FindRouteTopDocument, options);\n}\nexport function useFindRouteTopLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >(FindRouteTopDocument, options);\n}\nexport type FindRouteTopQueryHookResult = ReturnType<\n  typeof useFindRouteTopQuery\n>;\nexport type FindRouteTopLazyQueryHookResult = ReturnType<\n  typeof useFindRouteTopLazyQuery\n>;\nexport type FindRouteTopQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouteTopQuery,\n  SchemaTypes.FindRouteTopQueryVariables\n>;\nexport const FindRouterDocument = gql`\n  query findRouter($id: ID!) {\n    router(id: $id) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterQuery__\n *\n * To run a query within a React component, call `useFindRouterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRouterQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >(FindRouterDocument, options);\n}\nexport function useFindRouterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >(FindRouterDocument, options);\n}\nexport type FindRouterQueryHookResult = ReturnType<typeof useFindRouterQuery>;\nexport type FindRouterLazyQueryHookResult = ReturnType<\n  typeof useFindRouterLazyQuery\n>;\nexport type FindRouterQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterQuery,\n  SchemaTypes.FindRouterQueryVariables\n>;\nexport const FindRouterAllDocument = gql`\n  query findRouterAll($param: QueryListParam) {\n    routerAll(param: $param) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterAllQuery__\n *\n * To run a query within a React component, call `useFindRouterAllQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterAllQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterAllQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterAllQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >(FindRouterAllDocument, options);\n}\nexport function useFindRouterAllLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >(FindRouterAllDocument, options);\n}\nexport type FindRouterAllQueryHookResult = ReturnType<\n  typeof useFindRouterAllQuery\n>;\nexport type FindRouterAllLazyQueryHookResult = ReturnType<\n  typeof useFindRouterAllLazyQuery\n>;\nexport type FindRouterAllQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterAllQuery,\n  SchemaTypes.FindRouterAllQueryVariables\n>;\nexport const RouterDestroyByIdDocument = gql`\n  mutation routerDestroyById($id: String!) {\n    routerDestroyById(id: $id)\n  }\n`;\nexport type RouterDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterDestroyByIdMutation,\n  SchemaTypes.RouterDestroyByIdMutationVariables\n>;\n\n/**\n * __useRouterDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRouterDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerDestroyByIdMutation, { data, loading, error }] = useRouterDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRouterDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterDestroyByIdMutation,\n    SchemaTypes.RouterDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterDestroyByIdMutation,\n    SchemaTypes.RouterDestroyByIdMutationVariables\n  >(RouterDestroyByIdDocument, options);\n}\nexport type RouterDestroyByIdMutationHookResult = ReturnType<\n  typeof useRouterDestroyByIdMutation\n>;\nexport type RouterDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RouterDestroyByIdMutation>;\nexport type RouterDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterDestroyByIdMutation,\n  SchemaTypes.RouterDestroyByIdMutationVariables\n>;\nexport const RouterDocument = gql`\n  mutation router($param: RouterSaveIn!) {\n    router(param: $param)\n  }\n`;\nexport type RouterMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterMutation,\n  SchemaTypes.RouterMutationVariables\n>;\n\n/**\n * __useRouterMutation__\n *\n * To run a mutation, you first call `useRouterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerMutation, { data, loading, error }] = useRouterMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRouterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterMutation,\n    SchemaTypes.RouterMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterMutation,\n    SchemaTypes.RouterMutationVariables\n  >(RouterDocument, options);\n}\nexport type RouterMutationHookResult = ReturnType<typeof useRouterMutation>;\nexport type RouterMutationResult = Apollo.MutationResult<SchemaTypes.RouterMutation>;\nexport type RouterMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterMutation,\n  SchemaTypes.RouterMutationVariables\n>;\nexport const UpdRouterParentIdDocument = gql`\n  mutation updRouterParentId($id: ID!, $parentId: String) {\n    router(param: { id: $id, parentId: $parentId })\n  }\n`;\nexport type UpdRouterParentIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.UpdRouterParentIdMutation,\n  SchemaTypes.UpdRouterParentIdMutationVariables\n>;\n\n/**\n * __useUpdRouterParentIdMutation__\n *\n * To run a mutation, you first call `useUpdRouterParentIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdRouterParentIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updRouterParentIdMutation, { data, loading, error }] = useUpdRouterParentIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *      parentId: // value for 'parentId'\n *   },\n * });\n */\nexport function useUpdRouterParentIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.UpdRouterParentIdMutation,\n    SchemaTypes.UpdRouterParentIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.UpdRouterParentIdMutation,\n    SchemaTypes.UpdRouterParentIdMutationVariables\n  >(UpdRouterParentIdDocument, options);\n}\nexport type UpdRouterParentIdMutationHookResult = ReturnType<\n  typeof useUpdRouterParentIdMutation\n>;\nexport type UpdRouterParentIdMutationResult = Apollo.MutationResult<SchemaTypes.UpdRouterParentIdMutation>;\nexport type UpdRouterParentIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.UpdRouterParentIdMutation,\n  SchemaTypes.UpdRouterParentIdMutationVariables\n>;\n",
    "import { DocumentNode } from 'graphql';\nimport i18n from '../plugins/i18next';\nimport {\n  get,\n  isString,\n  toString,\n  isArray,\n  difference,\n  keys,\n  set,\n  toInteger,\n  find,\n} from 'lodash';\nimport { ColumnType } from 'antd/lib/table';\nimport {\n  Tooltip,\n  Input,\n  Space,\n  Button,\n  notification,\n  PageHeader,\n  message,\n} from 'antd';\nimport { produce } from 'immer';\nimport {\n  FilterDropdownProps,\n  SorterResult,\n  SortOrder,\n  TablePaginationConfig,\n} from 'antd/lib/table/interface';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport {\n  SearchOutlined,\n  CloseCircleOutlined,\n  WarningOutlined,\n  ExclamationCircleOutlined,\n  RedoOutlined,\n  SettingOutlined,\n  ColumnHeightOutlined,\n} from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\nimport { useImmer } from 'use-immer';\nimport { ProColumns, ProColumnType } from '@ant-design/pro-table';\n\n// #region table helper\nexport type WhereType =\n  | '_like'\n  | '_between'\n  | '_gte'\n  | '_gt'\n  | '_lt'\n  | '_lte'\n  | '_eq'\n  | '_not';\nexport interface ITablePagination {\n  current: number;\n  pageSize: number;\n  order: Maybe<string[][]>;\n  filters: Maybe<Object>;\n}\n\n/**\n * 根据table filters 转化为 where\n * @param keysFilter\n * @param whereType\n * @returns\n */\nexport const filtersToWhere = <T,>(\n  keysFilter: Maybe<Object[]>,\n  whereType: {\n    [p in keyof T]: WhereType;\n  }\n): Maybe<Object> => {\n  if (!keysFilter) {\n    return undefined;\n  }\n  const where = {};\n  keysFilter.forEach((k) => {\n    keys(k)\n      .filter((p) => get(k, p) && !['current', 'pageSize'].includes(p))\n      .forEach((p) => {\n        let value = get(k, p);\n        if (isArray(value) && value.length === 1) {\n          value = value[0];\n        }\n        const whereItem = get(whereType, p);\n        if (whereItem === '_like') {\n          value = `%${value}%`;\n        }\n        set(where, p, whereItem ? { [whereItem]: value } : value);\n      });\n  });\n  return where;\n};\n\nexport const localChange = <T,>(\n  dataSource: Maybe<Array<any>>,\n  pagination: TablePaginationConfig,\n  filters: Record<string, (boolean | React.Key)[] | null>,\n  sorter: SorterResult<T> | SorterResult<T>[],\n  whereType?: {\n    [p in keyof T]: WhereType;\n  }\n) => {\n  const fkey = keys(filters).filter((p) => filters[p]);\n  return dataSource?.filter((p) => {\n    const item = find(fkey, (k) => {\n      const value = toString((get(filters, k) as Array<string>)[0]);\n      const source = toString(get(p, k));\n      // 求反 如果存在则过滤掉\n      if (!get(whereType, k) || ['_eq', '_like'].includes(get(whereType, k))) {\n        return !source.includes(value);\n      } else if (!get(whereType, k) || get(whereType, k) === '_not') {\n        return source.includes(value);\n      }\n    });\n    return item === undefined;\n  });\n};\n\n/**\n * 根据查询类型反向生成列\n * @param param\n * @returns\n */\nexport const generatorColumns = <T,>(\n  documentNode: DocumentNode,\n  setColumns?: Array<ColumnType<T>>,\n  delColumns?: Array<keyof T>\n): (ProColumns<T> | ColumnType<T>)[] => {\n  let stringList = findFragmentDefinition<T>(documentNode);\n  if (delColumns) {\n    stringList = difference(stringList, delColumns as any);\n  }\n  if (setColumns) {\n    stringList = changeColumns(\n      stringList as Array<keyof T | ColumnType<T>>,\n      setColumns\n    );\n  }\n  return createColumns<T>(...stringList);\n};\n\n/**\n * 根据operation生成columns array\n * @param documentNode\n * @returns\n */\nexport const findFragmentDefinition = <T,>(\n  documentNode: DocumentNode\n): Array<keyof T | ColumnType<T>> => {\n  const definitionNode = documentNode.definitions.find(\n    (p) => p.kind === 'FragmentDefinition'\n  );\n  if (!definitionNode) {\n    throw new Error('没有找到[FragmentDefinition]请确认！');\n  }\n  const value = get(definitionNode, 'selectionSet.selections');\n  return value?.map((p: any) => get(p, 'name.value'));\n};\n\n/**\n * 修正类型\n * @param columns\n * @param setState\n * @returns\n */\nexport const changeColumns = <T,>(\n  columns: Array<keyof T | ColumnType<T>>,\n  setState: Array<ColumnType<T>>\n): Array<keyof T | ColumnType<T>> => {\n  return produce(columns, (draft) => {\n    setState.forEach((p) => {\n      const inc = draft.findIndex((x) => x === p.key);\n      inc > -1 ? (draft[inc] = p as any) : draft.push(p as any);\n    });\n  });\n};\n\nconst columnsDefault = <T,>(key: string): ProColumnType<T> | ColumnType<T> => {\n  return {\n    title: i18n.t(key.toString()),\n    dataIndex: key.toString(),\n    sorter: true,\n    key: key.toString(),\n  };\n};\n\nconst columnsTypeDefault = <T,>(\n  col: ColumnType<T>\n): ProColumnType<T> | ColumnType<T> => {\n  return {\n    title: i18n.t(toString(col.title || col.key)),\n    dataIndex: toString(col.key),\n    sorter: true,\n    ...col,\n  };\n};\n\n/**\n * 自动生成列\n * @param key to dataIndex\n * @returns\n */\nexport const createColumns = <T,>(\n  ...key: Array<keyof T | ColumnType<T>>\n): (ProColumns<T> | ColumnType<T>)[] =>\n  key.map((p) =>\n    isString(p) ? columnsDefault<T>(p) : columnsTypeDefault(p as ColumnType<T>)\n  );\n\n/**\n * ellipsis title to tooltip\n * @returns\n */\nexport const defaultEllipsis = {\n  ellipsis: {\n    showTitle: false,\n  },\n  render: (value: any) => (\n    <Tooltip placement=\"topLeft\" title={value}>\n      {value}\n    </Tooltip>\n  ),\n};\n\n/**\n * table sort 转 order\n * @param sorter\n */\nexport const sortToOrder = <T,>(\n  sorter: SorterResult<T> | SorterResult<T>[]\n): Maybe<string[][]> => {\n  if (!isArray(sorter) && !sorter.order) {\n    return undefined;\n  }\n  const sorterList = isArray(sorter) ? sorter : [sorter];\n  return sorterList\n    .filter((p) => p.columnKey)\n    .map((p) => [toString(p.columnKey), 'ascend' === p.order ? 'ASC' : 'DESC']);\n};\n\n/**\n * pro tbale sort\n * @param sort\n */\nexport const proSortToOrder = (sort: Record<string, SortOrder>) => {\n  if (!sort) {\n    return undefined;\n  }\n  const keystrings = keys(sort);\n  if (keystrings.length <= 0) {\n    return undefined;\n  }\n  return [\n    [keystrings[0], 'ascend' === get(sort, keystrings[0]) ? 'ASC' : 'DESC'],\n  ];\n};\n\nexport interface IKeysFilter {\n  dataIndex: string;\n  searchValue: Maybe<(string | Date | Object)[]>;\n  queryItem: Maybe<Object>;\n}\n\n/**\n * 自定义模糊筛选菜单\n */\nexport const getColumnSearch = <T,>(dataIndex?: keyof T) => {\n  /**\n   * 文本控件\n   */\n  let refSearchInput: Maybe<Input> = undefined;\n  return {\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n      filters,\n    }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => (refSearchInput = node)}\n          placeholder={`${i18n.t('fuzzyMatching')}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() => {\n            console.log(selectedKeys);\n            confirm();\n          }}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => confirm()}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            {i18n.t('search')}\n          </Button>\n          <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\n            {i18n.t('reset')}\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => confirm({ closeDropdown: false })}\n          >\n            {i18n.t('filter')}\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: any) => (\n      <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilterDropdownVisibleChange: (visible: any) =>\n      visible && setTimeout(() => refSearchInput?.select(), 100),\n    // 自定义列render\n    render: (text: string) => {\n      if (refSearchInput) {\n        return (\n          <Highlighter\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n            searchWords={[get(refSearchInput, 'props.value')]}\n            autoEscape\n            textToHighlight={text ? text.toString() : ''}\n          />\n        );\n      } else {\n        return text;\n      }\n    },\n  };\n};\n\n/**\n * 判断当前页码\n * @param total\n * @param current\n * @param pageSize\n * @param delNum 删除数量\n * @returns\n */\nexport const calcCurrent = (\n  total: Maybe<number>,\n  current: number = 1,\n  pageSize: number = 10,\n  delNum: number = 0\n): number => {\n  let currentDiff = Math.floor(\n    ((total || 0) + pageSize - 1 - delNum) / pageSize\n  );\n  if (currentDiff > current) {\n    return current || 1;\n  }\n  return currentDiff || 1;\n};\n\n/**\n * use分页hook\n * @param paginationParam\n * @param whereModel\n * @returns\n */\nexport function usePagination(\n  whereModel: any,\n  paginationParam: ITablePagination = {\n    current: 1,\n    pageSize: 10,\n    order: undefined,\n    filters: undefined,\n  }\n) {\n  const [pagination, setPagination] = useImmer<ITablePagination>({\n    ...paginationParam,\n  });\n\n  const handleTableChange = (\n    pagination: TablePaginationConfig,\n    filters: Record<string, (boolean | React.Key)[] | null>,\n    sorter: SorterResult<any> | SorterResult<any>[]\n  ) => {\n    setPagination((draft) => {\n      draft.current = toInteger(pagination.current);\n      draft.pageSize = toInteger(pagination.pageSize);\n      draft.order = sortToOrder(sorter);\n      draft.filters = filtersToWhere([filters], whereModel);\n    });\n  };\n  return { pagination, handleTableChange };\n}\n/**\n * table header\n * @returns\n */\nexport function tableheaderComponent() {\n  return (\n    <PageHeader\n      className=\"site-page-header\"\n      extra={[\n        <Button key=\"add\" type=\"primary\">\n          {i18n.t('add')}\n        </Button>,\n        <Tooltip title={i18n.t('refetch')}>\n          <Button style={{ border: 0 }} icon={<RedoOutlined />} />\n        </Tooltip>,\n        <Tooltip title={i18n.t('density')}>\n          <Button style={{ border: 0 }} icon={<ColumnHeightOutlined />} />\n        </Tooltip>,\n        <Tooltip title={i18n.t('setting')}>\n          <Button style={{ border: 0 }} icon={<SettingOutlined />} />\n        </Tooltip>,\n      ]}\n    />\n  );\n}\n// #endregion\n\n// #region 控件默认值\nexport const defaultPagination = {\n  hideOnSinglePage: true,\n  showSizeChanger: true,\n  showQuickJumper: true,\n};\n// #endregion\n\n// #region error\nexport const gqlErrorMessage = (error: any) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    error?.networkError?.statusCode === 400\n  ) {\n    return message.error(\n      Array.from(\n        new Set(\n          get(error, 'networkError.result.errors').map((p: any) => p.message)\n        )\n      ).join('\\r\\n')\n    );\n  }\n  return message.error(error.message || error.networkError.message);\n};\n// #endregion\n\n// #region Notification helper\n/**\n * error 错误提示\n */\nexport const openNotification = (\n  title: string,\n  message: string,\n  type: 'error' | 'warning' | 'message' = 'error'\n) => {\n  let icon = <CloseCircleOutlined />;\n  if (type === 'warning') {\n    icon = <WarningOutlined />;\n  } else if (type === 'message') {\n    icon = <ExclamationCircleOutlined />;\n  }\n  notification.open({\n    message: title,\n    description: message,\n    icon,\n  });\n};\n// #endregion\n",
    "import i18n from '../plugins/i18next';\n\nexport const APP_NAME = {\n  'midway-refined-platform': i18n.t('midway-refined-platform'),\n  'midway-integral-recycling': i18n.t('midway-integral-recycling'),\n};\n"
  ],
  "sourceRoot": ""
}