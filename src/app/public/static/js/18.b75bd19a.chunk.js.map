{"version":3,"sources":["views/router/list.tsx","generator/auth-center.operation.ts","utils/antd-helper.tsx","data/static.ts"],"names":["whereModel","routerCode","routerName","createdAt","List","t","useTranslation","history","useHistory","refProTable","useRef","columnsDefault","generatorColumns","FindRouterListDocument","key","getColumnSearch","render","text","record","index","action","to","filters","onFilter","valueType","filterMultiple","valueEnum","mapValues","APP_NAME","p","format","Date","sorter","title","onConfirm","destroyByIdMutation","variables","id","toString","then","reload","success","Format","catch","error","type","size","useImmer","columns","useRoleGroupDestroyByIdMutation","refetch","useFindRouterListQuery","skip","actionRef","request","params","filter","a","param","limit","pageSize","offset","toInteger","current","order","proSortToOrder","where","filtersToWhere","result","data","routerAll","total","routerCount","rowKey","pagination","showQuickJumper","hideOnSinglePage","search","layout","dateFormatter","toolBarRender","onClick","push","debounceTime","process","options","density","defaultOptions","AppUserRoleAppUserIdFragmentDoc","gql","AppUserFragmentDoc","AppUserOnlyFragmentDoc","RoleGroupFragmentDoc","RoleGroupItemRoleGroupIdFragmentDoc","RoleGroupManageFragmentDoc","RoleFragmentDoc","AppUserRoleTypeIdFragmentDoc","RoleManageFragmentDoc","RouterRoleFragmentDoc","RouterFragmentDoc","AppUserRoleDestroyByIdDocument","useAppUserRoleDestroyByIdMutation","baseOptions","Apollo","AppUserRoleDestroyDocument","useAppUserRoleDestroyMutation","AppUserRoleBulkDocument","useAppUserRoleBulkMutation","FindAppUserListDocument","useFindAppUserListQuery","FindAppUserDocument","useFindAppUserQuery","FindAppUserListOnlyDocument","useFindAppUserListOnlyQuery","AppUserDestroyByIdDocument","useAppUserDestroyByIdMutation","AppUserStatusDocument","useAppUserStatusMutation","AppUserDocument","useAppUserMutation","RoleGroupItemDestroyByIdDocument","useRoleGroupItemDestroyByIdMutation","RoleGroupItemDestroyDocument","useRoleGroupItemDestroyMutation","RoleGroupItemBulkDocument","useRoleGroupItemBulkMutation","FindRoleGroupListDocument","useFindRoleGroupListQuery","FindRoleGroupManageListDocument","useFindRoleGroupManageListQuery","FindRoleGroupDocument","useFindRoleGroupQuery","RoleGroupDestroyByIdDocument","RoleGroupDocument","useRoleGroupMutation","FindRoleListDocument","useFindRoleListQuery","FindRoleListManageDocument","useFindRoleListManageQuery","RoleDestroyByIdDocument","useRoleDestroyByIdMutation","FindRoleDocument","useFindRoleQuery","RoleDocument","useRoleMutation","FindRouterRoleListDocument","useFindRouterRoleListQuery","RouterRoleBulkDocument","useRouterRoleBulkMutation","RouterRoleDestroyDocument","useRouterRoleDestroyMutation","FindRouteByParentIdDocument","useFindRouteByParentIdQuery","FindRouteTopDocument","useFindRouteTopQuery","FindRouterDocument","useFindRouterQuery","FindRouterAllDocument","useFindRouterAllQuery","RouterDocument","useRouterMutation","UpdRouterParentIdDocument","useUpdRouterParentIdMutation","keysFilter","whereType","forEach","k","keys","get","includes","value","isArray","length","whereItem","set","localChange","dataSource","fkey","undefined","find","source","documentNode","setColumns","delColumns","stringList","findFragmentDefinition","difference","changeColumns","createColumns","definitionNode","definitions","kind","Error","map","setState","produce","draft","inc","findIndex","x","i18n","dataIndex","columnsTypeDefault","col","isString","sort","keystrings","refSearchInput","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","onChange","e","target","onPressEnter","console","log","width","marginBottom","display","icon","closeDropdown","filterIcon","filtered","color","onFilterDropdownVisibleChange","visible","setTimeout","select","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","gqlErrorMessage","message","networkError"],"mappings":"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","file":"static/js/18.b75bd19a.chunk.js","sourcesContent":["import { FC, ReactNode, useRef } from 'react';\nimport { Popconfirm, Button, message } from 'antd';\nimport { useImmer } from 'use-immer';\nimport { useTranslation } from 'react-i18next';\nimport {\n  generatorColumns,\n  getColumnSearch,\n  WhereType,\n  filtersToWhere,\n  proSortToOrder,\n} from '../../utils/antd-helper';\nimport { RouterFragment } from '../../generator/auth-center';\nimport { toString, toInteger, mapValues } from 'lodash';\nimport {\n  FindRouterListDocument,\n  useFindRouterListQuery,\n  useRoleGroupDestroyByIdMutation,\n} from '../../generator/auth-center.operation';\nimport Format from 'string-format';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { UseFetchDataAction } from '@ant-design/pro-table/lib/typing';\nimport { format } from 'date-fns';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { APP_NAME } from 'data/static';\n\n// #region type\ntype SetColumnType = { key: keyof RouterFragment; [p: string]: any };\ntype FilterType = {\n  [p in keyof RouterFragment]: WhereType;\n};\n// #endregion\nconst whereModel: FilterType = {\n  routerCode: '_like',\n  routerName: '_like',\n  createdAt: '_between',\n};\n\nconst List: FC = () => {\n  const { t } = useTranslation();\n\n  const history = useHistory();\n\n  const refProTable = useRef<ActionType>();\n\n  const columnsDefault = generatorColumns<RouterFragment>(\n    FindRouterListDocument,\n    [\n      {\n        key: 'id',\n        ...getColumnSearch<RouterFragment>(),\n        render: (\n          text: ReactNode,\n          record: RouterFragment,\n          index: number,\n          action: UseFetchDataAction<RouterFragment>\n        ) => <Link to={`/router/${text}`}>{text}</Link>,\n      },\n      {\n        key: 'routerCode',\n        ...getColumnSearch<RouterFragment>(),\n      },\n      {\n        key: 'displayCode',\n        ...getColumnSearch<RouterFragment>(),\n      },\n      {\n        key: 'displayTxt',\n        ...getColumnSearch<RouterFragment>(),\n      },\n      {\n        key: 'remark',\n        ...getColumnSearch<RouterFragment>(),\n      },\n      {\n        key: 'routerName',\n        ...getColumnSearch<RouterFragment>(),\n      },\n      {\n        key: 'appName',\n        filters: true, // 列筛选\n        onFilter: true, // form筛选\n        valueType: 'select',\n        filterMultiple: false,\n        valueEnum: mapValues(APP_NAME, (p) => ({ text: p })),\n      },\n      {\n        key: 'createdAt',\n        valueType: 'dateTimeRange',\n        render: (text: ReactNode, record: RouterFragment) =>\n          format(new Date(record.createdAt), 'yyyy-MM-dd HH:mm:ss'),\n      },\n      {\n        key: 'operation',\n        sorter: false,\n        onFilter: true,\n        valueType: 'option',\n        render: (\n          text: ReactNode,\n          record: RouterFragment,\n          index: number,\n          action: UseFetchDataAction<RouterFragment>\n        ) => (\n          <Popconfirm\n            title={t('sureDelete')}\n            onConfirm={() =>\n              destroyByIdMutation({\n                variables: { id: toString(record?.id) },\n              })\n                .then(() => {\n                  action.reload();\n                  message.success(Format(t('deleteFor'), t('success')));\n                })\n                .catch(message.error)\n            }\n          >\n            <Button type=\"link\" size=\"small\">\n              {t('delete')}\n            </Button>\n          </Popconfirm>\n        ),\n      },\n    ] as SetColumnType[],\n    []\n  ) as ProColumns<RouterFragment>[];\n\n  /**\n   * 定义列\n   */\n  const [columns] = useImmer(columnsDefault);\n\n  /**\n   * mutation delete\n   */\n  const [destroyByIdMutation] = useRoleGroupDestroyByIdMutation();\n\n  const { refetch } = useFindRouterListQuery({ skip: true });\n\n  return (\n    <ProTable<RouterFragment>\n      columns={columns}\n      actionRef={refProTable}\n      request={async (params, sorter, filter) => {\n        return refetch({\n          param: {\n            limit: params.pageSize,\n            offset:\n              (toInteger(params.current) - 1) * toInteger(params.pageSize),\n            order: proSortToOrder(sorter),\n            where: filtersToWhere([params, filter], whereModel),\n          },\n        }).then((result) => {\n          return {\n            data: result.data.routerAll as Array<RouterFragment>,\n            total: toInteger(result.data?.routerCount),\n            success: true,\n          };\n        });\n      }}\n      rowKey=\"id\"\n      pagination={{\n        showQuickJumper: true,\n        hideOnSinglePage: true,\n      }}\n      search={{\n        layout: 'vertical',\n      }}\n      dateFormatter=\"string\"\n      toolBarRender={() => [\n        <Button\n          type=\"primary\"\n          key=\"primary\"\n          onClick={() => history.push('/router/')}\n        >\n          {t('add')}\n        </Button>,\n      ]}\n      debounceTime={toInteger(process.env.REACT_APP_ANTD_DEBOUNCE)}\n      options={{ density: true }}\n    />\n  );\n};\n\nexport default List;\n","import * as SchemaTypes from './auth-center';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\nexport const AppUserRoleAppUserIdFragmentDoc = gql`\n  fragment AppUserRoleAppUserId on AppUserRole {\n    id\n    roleType\n    typeId\n    typeIdModel {\n      __typename\n      ... on Role {\n        name: roleName\n        code: roleCode\n      }\n      ... on RoleGroup {\n        name: groupName\n        code: groupCode\n      }\n    }\n  }\n`;\nexport const AppUserFragmentDoc = gql`\n  fragment AppUser on AppUser {\n    id\n    userName\n    nickName\n    realName\n    userGender\n    phone\n    avatarUrl\n    appUserStatus\n    createdAt\n    appUserRoleAppUserId {\n      ...AppUserRoleAppUserId\n    }\n  }\n  ${AppUserRoleAppUserIdFragmentDoc}\n`;\nexport const AppUserOnlyFragmentDoc = gql`\n  fragment AppUserOnly on AppUser {\n    id\n    userName\n    nickName\n    realName\n    userGender\n    phone\n    appUserStatus\n    createdAt\n  }\n`;\nexport const RoleGroupFragmentDoc = gql`\n  fragment RoleGroup on RoleGroup {\n    id\n    appName\n    groupCode\n    groupName\n  }\n`;\nexport const RoleGroupItemRoleGroupIdFragmentDoc = gql`\n  fragment RoleGroupItemRoleGroupId on RoleGroupItem {\n    id\n    roleIdObj {\n      id\n      roleCode\n      roleName\n    }\n  }\n`;\nexport const RoleGroupManageFragmentDoc = gql`\n  fragment RoleGroupManage on RoleGroup {\n    id\n    groupCode\n    groupName\n    createdAt\n    remark\n    roleGroupItemRoleGroupId {\n      ...RoleGroupItemRoleGroupId\n    }\n  }\n  ${RoleGroupItemRoleGroupIdFragmentDoc}\n`;\nexport const RoleFragmentDoc = gql`\n  fragment Role on Role {\n    id\n    appName\n    roleCode\n    roleName\n  }\n`;\nexport const AppUserRoleTypeIdFragmentDoc = gql`\n  fragment appUserRoleTypeId on AppUserRole {\n    id\n    appUserId\n    appUserIdObj {\n      userName\n      nickName\n      phone\n    }\n  }\n`;\nexport const RoleManageFragmentDoc = gql`\n  fragment RoleManage on Role {\n    id\n    appName\n    roleCode\n    roleName\n    createdAt\n    remark\n    appUserRoleTypeId {\n      ...appUserRoleTypeId\n    }\n  }\n  ${AppUserRoleTypeIdFragmentDoc}\n`;\nexport const RouterRoleFragmentDoc = gql`\n  fragment RouterRole on RouterRole {\n    id\n    appName\n    authState\n    roleId\n    routerId\n  }\n`;\nexport const RouterFragmentDoc = gql`\n  fragment Router on Router {\n    id\n    appName\n    displayCode\n    displayTxt\n    parentId\n    remark\n    routerCode\n    routerName\n    createdAt\n  }\n`;\nexport const AppUserRoleDestroyByIdDocument = gql`\n  mutation appUserRoleDestroyById($id: String!) {\n    appUserRoleDestroyById(id: $id)\n  }\n`;\nexport type AppUserRoleDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleDestroyByIdMutation,\n  SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n>;\n\n/**\n * __useAppUserRoleDestroyByIdMutation__\n *\n * To run a mutation, you first call `useAppUserRoleDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleDestroyByIdMutation, { data, loading, error }] = useAppUserRoleDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAppUserRoleDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleDestroyByIdMutation,\n    SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleDestroyByIdMutation,\n    SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n  >(AppUserRoleDestroyByIdDocument, options);\n}\nexport type AppUserRoleDestroyByIdMutationHookResult = ReturnType<\n  typeof useAppUserRoleDestroyByIdMutation\n>;\nexport type AppUserRoleDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleDestroyByIdMutation>;\nexport type AppUserRoleDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleDestroyByIdMutation,\n  SchemaTypes.AppUserRoleDestroyByIdMutationVariables\n>;\nexport const AppUserRoleDestroyDocument = gql`\n  mutation appUserRoleDestroy($where: JSONObject!) {\n    appUserRoleDestroy(where: $where)\n  }\n`;\nexport type AppUserRoleDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleDestroyMutation,\n  SchemaTypes.AppUserRoleDestroyMutationVariables\n>;\n\n/**\n * __useAppUserRoleDestroyMutation__\n *\n * To run a mutation, you first call `useAppUserRoleDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleDestroyMutation, { data, loading, error }] = useAppUserRoleDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAppUserRoleDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleDestroyMutation,\n    SchemaTypes.AppUserRoleDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleDestroyMutation,\n    SchemaTypes.AppUserRoleDestroyMutationVariables\n  >(AppUserRoleDestroyDocument, options);\n}\nexport type AppUserRoleDestroyMutationHookResult = ReturnType<\n  typeof useAppUserRoleDestroyMutation\n>;\nexport type AppUserRoleDestroyMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleDestroyMutation>;\nexport type AppUserRoleDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleDestroyMutation,\n  SchemaTypes.AppUserRoleDestroyMutationVariables\n>;\nexport const AppUserRoleDocument = gql`\n  mutation appUserRole($param: AppUserRoleSaveIn!) {\n    appUserRole(param: $param)\n  }\n`;\nexport type AppUserRoleMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleMutation,\n  SchemaTypes.AppUserRoleMutationVariables\n>;\n\n/**\n * __useAppUserRoleMutation__\n *\n * To run a mutation, you first call `useAppUserRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleMutation, { data, loading, error }] = useAppUserRoleMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserRoleMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleMutation,\n    SchemaTypes.AppUserRoleMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleMutation,\n    SchemaTypes.AppUserRoleMutationVariables\n  >(AppUserRoleDocument, options);\n}\nexport type AppUserRoleMutationHookResult = ReturnType<\n  typeof useAppUserRoleMutation\n>;\nexport type AppUserRoleMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleMutation>;\nexport type AppUserRoleMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleMutation,\n  SchemaTypes.AppUserRoleMutationVariables\n>;\nexport const AppUserRoleBulkDocument = gql`\n  mutation appUserRoleBulk($param: [AppUserRoleSaveIn]!) {\n    appUserRoleBulk(param: $param)\n  }\n`;\nexport type AppUserRoleBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserRoleBulkMutation,\n  SchemaTypes.AppUserRoleBulkMutationVariables\n>;\n\n/**\n * __useAppUserRoleBulkMutation__\n *\n * To run a mutation, you first call `useAppUserRoleBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserRoleBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserRoleBulkMutation, { data, loading, error }] = useAppUserRoleBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserRoleBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserRoleBulkMutation,\n    SchemaTypes.AppUserRoleBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserRoleBulkMutation,\n    SchemaTypes.AppUserRoleBulkMutationVariables\n  >(AppUserRoleBulkDocument, options);\n}\nexport type AppUserRoleBulkMutationHookResult = ReturnType<\n  typeof useAppUserRoleBulkMutation\n>;\nexport type AppUserRoleBulkMutationResult = Apollo.MutationResult<SchemaTypes.AppUserRoleBulkMutation>;\nexport type AppUserRoleBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserRoleBulkMutation,\n  SchemaTypes.AppUserRoleBulkMutationVariables\n>;\nexport const FindAppUserListDocument = gql`\n  query findAppUserList($param: QueryListParam!) {\n    appUserAll(param: $param) {\n      ...AppUser\n    }\n    appUserCount(param: $param)\n  }\n  ${AppUserFragmentDoc}\n`;\n\n/**\n * __useFindAppUserListQuery__\n *\n * To run a query within a React component, call `useFindAppUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindAppUserListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >(FindAppUserListDocument, options);\n}\nexport function useFindAppUserListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserListQuery,\n    SchemaTypes.FindAppUserListQueryVariables\n  >(FindAppUserListDocument, options);\n}\nexport type FindAppUserListQueryHookResult = ReturnType<\n  typeof useFindAppUserListQuery\n>;\nexport type FindAppUserListLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserListLazyQuery\n>;\nexport type FindAppUserListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserListQuery,\n  SchemaTypes.FindAppUserListQueryVariables\n>;\nexport const FindAppUserDocument = gql`\n  query findAppUser($id: ID!) {\n    appUser(id: $id) {\n      ...AppUser\n    }\n  }\n  ${AppUserFragmentDoc}\n`;\n\n/**\n * __useFindAppUserQuery__\n *\n * To run a query within a React component, call `useFindAppUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindAppUserQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >(FindAppUserDocument, options);\n}\nexport function useFindAppUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserQuery,\n    SchemaTypes.FindAppUserQueryVariables\n  >(FindAppUserDocument, options);\n}\nexport type FindAppUserQueryHookResult = ReturnType<typeof useFindAppUserQuery>;\nexport type FindAppUserLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserLazyQuery\n>;\nexport type FindAppUserQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserQuery,\n  SchemaTypes.FindAppUserQueryVariables\n>;\nexport const FindAppUserListOnlyDocument = gql`\n  query findAppUserListOnly($param: QueryListParam!) {\n    appUserAll(param: $param) {\n      ...AppUserOnly\n    }\n    appUserCount(param: $param)\n  }\n  ${AppUserOnlyFragmentDoc}\n`;\n\n/**\n * __useFindAppUserListOnlyQuery__\n *\n * To run a query within a React component, call `useFindAppUserListOnlyQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAppUserListOnlyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAppUserListOnlyQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindAppUserListOnlyQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >(FindAppUserListOnlyDocument, options);\n}\nexport function useFindAppUserListOnlyLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindAppUserListOnlyQuery,\n    SchemaTypes.FindAppUserListOnlyQueryVariables\n  >(FindAppUserListOnlyDocument, options);\n}\nexport type FindAppUserListOnlyQueryHookResult = ReturnType<\n  typeof useFindAppUserListOnlyQuery\n>;\nexport type FindAppUserListOnlyLazyQueryHookResult = ReturnType<\n  typeof useFindAppUserListOnlyLazyQuery\n>;\nexport type FindAppUserListOnlyQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindAppUserListOnlyQuery,\n  SchemaTypes.FindAppUserListOnlyQueryVariables\n>;\nexport const AppUserDestroyByIdDocument = gql`\n  mutation appUserDestroyById($id: String!) {\n    appUserDestroyById(id: $id)\n  }\n`;\nexport type AppUserDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserDestroyByIdMutation,\n  SchemaTypes.AppUserDestroyByIdMutationVariables\n>;\n\n/**\n * __useAppUserDestroyByIdMutation__\n *\n * To run a mutation, you first call `useAppUserDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserDestroyByIdMutation, { data, loading, error }] = useAppUserDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAppUserDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserDestroyByIdMutation,\n    SchemaTypes.AppUserDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserDestroyByIdMutation,\n    SchemaTypes.AppUserDestroyByIdMutationVariables\n  >(AppUserDestroyByIdDocument, options);\n}\nexport type AppUserDestroyByIdMutationHookResult = ReturnType<\n  typeof useAppUserDestroyByIdMutation\n>;\nexport type AppUserDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.AppUserDestroyByIdMutation>;\nexport type AppUserDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserDestroyByIdMutation,\n  SchemaTypes.AppUserDestroyByIdMutationVariables\n>;\nexport const AppUserStatusDocument = gql`\n  mutation appUserStatus($id: ID!, $appUserStatus: String) {\n    appUser(param: { id: $id, appUserStatus: $appUserStatus })\n  }\n`;\nexport type AppUserStatusMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserStatusMutation,\n  SchemaTypes.AppUserStatusMutationVariables\n>;\n\n/**\n * __useAppUserStatusMutation__\n *\n * To run a mutation, you first call `useAppUserStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserStatusMutation, { data, loading, error }] = useAppUserStatusMutation({\n *   variables: {\n *      id: // value for 'id'\n *      appUserStatus: // value for 'appUserStatus'\n *   },\n * });\n */\nexport function useAppUserStatusMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserStatusMutation,\n    SchemaTypes.AppUserStatusMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserStatusMutation,\n    SchemaTypes.AppUserStatusMutationVariables\n  >(AppUserStatusDocument, options);\n}\nexport type AppUserStatusMutationHookResult = ReturnType<\n  typeof useAppUserStatusMutation\n>;\nexport type AppUserStatusMutationResult = Apollo.MutationResult<SchemaTypes.AppUserStatusMutation>;\nexport type AppUserStatusMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserStatusMutation,\n  SchemaTypes.AppUserStatusMutationVariables\n>;\nexport const AppUserDocument = gql`\n  mutation appUser($param: AppUserSaveIn!) {\n    appUser(param: $param)\n  }\n`;\nexport type AppUserMutationFn = Apollo.MutationFunction<\n  SchemaTypes.AppUserMutation,\n  SchemaTypes.AppUserMutationVariables\n>;\n\n/**\n * __useAppUserMutation__\n *\n * To run a mutation, you first call `useAppUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appUserMutation, { data, loading, error }] = useAppUserMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useAppUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.AppUserMutation,\n    SchemaTypes.AppUserMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.AppUserMutation,\n    SchemaTypes.AppUserMutationVariables\n  >(AppUserDocument, options);\n}\nexport type AppUserMutationHookResult = ReturnType<typeof useAppUserMutation>;\nexport type AppUserMutationResult = Apollo.MutationResult<SchemaTypes.AppUserMutation>;\nexport type AppUserMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.AppUserMutation,\n  SchemaTypes.AppUserMutationVariables\n>;\nexport const RoleGroupItemDestroyByIdDocument = gql`\n  mutation roleGroupItemDestroyById($id: String!) {\n    roleGroupItemDestroyById(id: $id)\n  }\n`;\nexport type RoleGroupItemDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemDestroyByIdMutation,\n  SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleGroupItemDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemDestroyByIdMutation, { data, loading, error }] = useRoleGroupItemDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleGroupItemDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemDestroyByIdMutation,\n    SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemDestroyByIdMutation,\n    SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n  >(RoleGroupItemDestroyByIdDocument, options);\n}\nexport type RoleGroupItemDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleGroupItemDestroyByIdMutation\n>;\nexport type RoleGroupItemDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemDestroyByIdMutation>;\nexport type RoleGroupItemDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemDestroyByIdMutation,\n  SchemaTypes.RoleGroupItemDestroyByIdMutationVariables\n>;\nexport const RoleGroupItemDestroyDocument = gql`\n  mutation roleGroupItemDestroy($where: JSONObject!) {\n    roleGroupItemDestroy(where: $where)\n  }\n`;\nexport type RoleGroupItemDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemDestroyMutation,\n  SchemaTypes.RoleGroupItemDestroyMutationVariables\n>;\n\n/**\n * __useRoleGroupItemDestroyMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemDestroyMutation, { data, loading, error }] = useRoleGroupItemDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useRoleGroupItemDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemDestroyMutation,\n    SchemaTypes.RoleGroupItemDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemDestroyMutation,\n    SchemaTypes.RoleGroupItemDestroyMutationVariables\n  >(RoleGroupItemDestroyDocument, options);\n}\nexport type RoleGroupItemDestroyMutationHookResult = ReturnType<\n  typeof useRoleGroupItemDestroyMutation\n>;\nexport type RoleGroupItemDestroyMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemDestroyMutation>;\nexport type RoleGroupItemDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemDestroyMutation,\n  SchemaTypes.RoleGroupItemDestroyMutationVariables\n>;\nexport const RoleGroupItemDocument = gql`\n  mutation roleGroupItem($param: RoleGroupItemSaveIn!) {\n    roleGroupItem(param: $param)\n  }\n`;\nexport type RoleGroupItemMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemMutation,\n  SchemaTypes.RoleGroupItemMutationVariables\n>;\n\n/**\n * __useRoleGroupItemMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemMutation, { data, loading, error }] = useRoleGroupItemMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupItemMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemMutation,\n    SchemaTypes.RoleGroupItemMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemMutation,\n    SchemaTypes.RoleGroupItemMutationVariables\n  >(RoleGroupItemDocument, options);\n}\nexport type RoleGroupItemMutationHookResult = ReturnType<\n  typeof useRoleGroupItemMutation\n>;\nexport type RoleGroupItemMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemMutation>;\nexport type RoleGroupItemMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemMutation,\n  SchemaTypes.RoleGroupItemMutationVariables\n>;\nexport const RoleGroupItemBulkDocument = gql`\n  mutation roleGroupItemBulk($param: [RoleGroupItemSaveIn]!) {\n    roleGroupItemBulk(param: $param)\n  }\n`;\nexport type RoleGroupItemBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupItemBulkMutation,\n  SchemaTypes.RoleGroupItemBulkMutationVariables\n>;\n\n/**\n * __useRoleGroupItemBulkMutation__\n *\n * To run a mutation, you first call `useRoleGroupItemBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupItemBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupItemBulkMutation, { data, loading, error }] = useRoleGroupItemBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupItemBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupItemBulkMutation,\n    SchemaTypes.RoleGroupItemBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupItemBulkMutation,\n    SchemaTypes.RoleGroupItemBulkMutationVariables\n  >(RoleGroupItemBulkDocument, options);\n}\nexport type RoleGroupItemBulkMutationHookResult = ReturnType<\n  typeof useRoleGroupItemBulkMutation\n>;\nexport type RoleGroupItemBulkMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupItemBulkMutation>;\nexport type RoleGroupItemBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupItemBulkMutation,\n  SchemaTypes.RoleGroupItemBulkMutationVariables\n>;\nexport const FindRoleGroupListDocument = gql`\n  query findRoleGroupList($param: QueryListParam!) {\n    roleGroupAll(param: $param) {\n      ...RoleGroup\n    }\n    roleGroupCount(param: $param)\n  }\n  ${RoleGroupFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupListQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleGroupListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >(FindRoleGroupListDocument, options);\n}\nexport function useFindRoleGroupListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupListQuery,\n    SchemaTypes.FindRoleGroupListQueryVariables\n  >(FindRoleGroupListDocument, options);\n}\nexport type FindRoleGroupListQueryHookResult = ReturnType<\n  typeof useFindRoleGroupListQuery\n>;\nexport type FindRoleGroupListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupListLazyQuery\n>;\nexport type FindRoleGroupListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupListQuery,\n  SchemaTypes.FindRoleGroupListQueryVariables\n>;\nexport const FindRoleGroupManageListDocument = gql`\n  query findRoleGroupManageList($param: QueryListParam!) {\n    roleGroupAll(param: $param) {\n      ...RoleGroupManage\n    }\n    roleGroupCount(param: $param)\n  }\n  ${RoleGroupManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupManageListQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupManageListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupManageListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupManageListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleGroupManageListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >(FindRoleGroupManageListDocument, options);\n}\nexport function useFindRoleGroupManageListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupManageListQuery,\n    SchemaTypes.FindRoleGroupManageListQueryVariables\n  >(FindRoleGroupManageListDocument, options);\n}\nexport type FindRoleGroupManageListQueryHookResult = ReturnType<\n  typeof useFindRoleGroupManageListQuery\n>;\nexport type FindRoleGroupManageListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupManageListLazyQuery\n>;\nexport type FindRoleGroupManageListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupManageListQuery,\n  SchemaTypes.FindRoleGroupManageListQueryVariables\n>;\nexport const FindRoleGroupDocument = gql`\n  query findRoleGroup($id: ID!) {\n    roleGroup(id: $id) {\n      ...RoleGroupManage\n    }\n  }\n  ${RoleGroupManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleGroupQuery__\n *\n * To run a query within a React component, call `useFindRoleGroupQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleGroupQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRoleGroupQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >(FindRoleGroupDocument, options);\n}\nexport function useFindRoleGroupLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleGroupQuery,\n    SchemaTypes.FindRoleGroupQueryVariables\n  >(FindRoleGroupDocument, options);\n}\nexport type FindRoleGroupQueryHookResult = ReturnType<\n  typeof useFindRoleGroupQuery\n>;\nexport type FindRoleGroupLazyQueryHookResult = ReturnType<\n  typeof useFindRoleGroupLazyQuery\n>;\nexport type FindRoleGroupQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleGroupQuery,\n  SchemaTypes.FindRoleGroupQueryVariables\n>;\nexport const RoleGroupDestroyByIdDocument = gql`\n  mutation roleGroupDestroyById($id: String!) {\n    roleGroupDestroyById(id: $id)\n  }\n`;\nexport type RoleGroupDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupDestroyByIdMutation,\n  SchemaTypes.RoleGroupDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleGroupDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleGroupDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupDestroyByIdMutation, { data, loading, error }] = useRoleGroupDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleGroupDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupDestroyByIdMutation,\n    SchemaTypes.RoleGroupDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupDestroyByIdMutation,\n    SchemaTypes.RoleGroupDestroyByIdMutationVariables\n  >(RoleGroupDestroyByIdDocument, options);\n}\nexport type RoleGroupDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleGroupDestroyByIdMutation\n>;\nexport type RoleGroupDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupDestroyByIdMutation>;\nexport type RoleGroupDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupDestroyByIdMutation,\n  SchemaTypes.RoleGroupDestroyByIdMutationVariables\n>;\nexport const RoleGroupDocument = gql`\n  mutation roleGroup($param: RoleGroupSaveIn!) {\n    roleGroup(param: $param)\n  }\n`;\nexport type RoleGroupMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleGroupMutation,\n  SchemaTypes.RoleGroupMutationVariables\n>;\n\n/**\n * __useRoleGroupMutation__\n *\n * To run a mutation, you first call `useRoleGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleGroupMutation, { data, loading, error }] = useRoleGroupMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleGroupMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleGroupMutation,\n    SchemaTypes.RoleGroupMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleGroupMutation,\n    SchemaTypes.RoleGroupMutationVariables\n  >(RoleGroupDocument, options);\n}\nexport type RoleGroupMutationHookResult = ReturnType<\n  typeof useRoleGroupMutation\n>;\nexport type RoleGroupMutationResult = Apollo.MutationResult<SchemaTypes.RoleGroupMutation>;\nexport type RoleGroupMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleGroupMutation,\n  SchemaTypes.RoleGroupMutationVariables\n>;\nexport const FindRoleListDocument = gql`\n  query findRoleList($param: QueryListParam!) {\n    roleAll(param: $param) {\n      ...Role\n    }\n    roleCount(param: $param)\n  }\n  ${RoleFragmentDoc}\n`;\n\n/**\n * __useFindRoleListQuery__\n *\n * To run a query within a React component, call `useFindRoleListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >(FindRoleListDocument, options);\n}\nexport function useFindRoleListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleListQuery,\n    SchemaTypes.FindRoleListQueryVariables\n  >(FindRoleListDocument, options);\n}\nexport type FindRoleListQueryHookResult = ReturnType<\n  typeof useFindRoleListQuery\n>;\nexport type FindRoleListLazyQueryHookResult = ReturnType<\n  typeof useFindRoleListLazyQuery\n>;\nexport type FindRoleListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleListQuery,\n  SchemaTypes.FindRoleListQueryVariables\n>;\nexport const FindRoleListManageDocument = gql`\n  query findRoleListManage($param: QueryListParam!) {\n    roleAll(param: $param) {\n      ...RoleManage\n    }\n    roleCount(param: $param)\n  }\n  ${RoleManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleListManageQuery__\n *\n * To run a query within a React component, call `useFindRoleListManageQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleListManageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleListManageQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRoleListManageQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >(FindRoleListManageDocument, options);\n}\nexport function useFindRoleListManageLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleListManageQuery,\n    SchemaTypes.FindRoleListManageQueryVariables\n  >(FindRoleListManageDocument, options);\n}\nexport type FindRoleListManageQueryHookResult = ReturnType<\n  typeof useFindRoleListManageQuery\n>;\nexport type FindRoleListManageLazyQueryHookResult = ReturnType<\n  typeof useFindRoleListManageLazyQuery\n>;\nexport type FindRoleListManageQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleListManageQuery,\n  SchemaTypes.FindRoleListManageQueryVariables\n>;\nexport const RoleDestroyByIdDocument = gql`\n  mutation roleDestroyById($id: String!) {\n    roleDestroyById(id: $id)\n  }\n`;\nexport type RoleDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleDestroyByIdMutation,\n  SchemaTypes.RoleDestroyByIdMutationVariables\n>;\n\n/**\n * __useRoleDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRoleDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleDestroyByIdMutation, { data, loading, error }] = useRoleDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRoleDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleDestroyByIdMutation,\n    SchemaTypes.RoleDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleDestroyByIdMutation,\n    SchemaTypes.RoleDestroyByIdMutationVariables\n  >(RoleDestroyByIdDocument, options);\n}\nexport type RoleDestroyByIdMutationHookResult = ReturnType<\n  typeof useRoleDestroyByIdMutation\n>;\nexport type RoleDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RoleDestroyByIdMutation>;\nexport type RoleDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleDestroyByIdMutation,\n  SchemaTypes.RoleDestroyByIdMutationVariables\n>;\nexport const FindRoleDocument = gql`\n  query findRole($id: ID!) {\n    role(id: $id) {\n      ...RoleManage\n    }\n  }\n  ${RoleManageFragmentDoc}\n`;\n\n/**\n * __useFindRoleQuery__\n *\n * To run a query within a React component, call `useFindRoleQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRoleQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRoleQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >(FindRoleDocument, options);\n}\nexport function useFindRoleLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRoleQuery,\n    SchemaTypes.FindRoleQueryVariables\n  >(FindRoleDocument, options);\n}\nexport type FindRoleQueryHookResult = ReturnType<typeof useFindRoleQuery>;\nexport type FindRoleLazyQueryHookResult = ReturnType<\n  typeof useFindRoleLazyQuery\n>;\nexport type FindRoleQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRoleQuery,\n  SchemaTypes.FindRoleQueryVariables\n>;\nexport const RoleDocument = gql`\n  mutation role($param: RoleSaveIn!) {\n    role(param: $param)\n  }\n`;\nexport type RoleMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RoleMutation,\n  SchemaTypes.RoleMutationVariables\n>;\n\n/**\n * __useRoleMutation__\n *\n * To run a mutation, you first call `useRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [roleMutation, { data, loading, error }] = useRoleMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRoleMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RoleMutation,\n    SchemaTypes.RoleMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RoleMutation,\n    SchemaTypes.RoleMutationVariables\n  >(RoleDocument, options);\n}\nexport type RoleMutationHookResult = ReturnType<typeof useRoleMutation>;\nexport type RoleMutationResult = Apollo.MutationResult<SchemaTypes.RoleMutation>;\nexport type RoleMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RoleMutation,\n  SchemaTypes.RoleMutationVariables\n>;\nexport const FindRouterRoleListDocument = gql`\n  query findRouterRoleList($param: QueryListParam) {\n    routerRoleAll(param: $param) {\n      ...RouterRole\n    }\n  }\n  ${RouterRoleFragmentDoc}\n`;\n\n/**\n * __useFindRouterRoleListQuery__\n *\n * To run a query within a React component, call `useFindRouterRoleListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterRoleListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterRoleListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterRoleListQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >(FindRouterRoleListDocument, options);\n}\nexport function useFindRouterRoleListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterRoleListQuery,\n    SchemaTypes.FindRouterRoleListQueryVariables\n  >(FindRouterRoleListDocument, options);\n}\nexport type FindRouterRoleListQueryHookResult = ReturnType<\n  typeof useFindRouterRoleListQuery\n>;\nexport type FindRouterRoleListLazyQueryHookResult = ReturnType<\n  typeof useFindRouterRoleListLazyQuery\n>;\nexport type FindRouterRoleListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterRoleListQuery,\n  SchemaTypes.FindRouterRoleListQueryVariables\n>;\nexport const RouterRoleBulkDocument = gql`\n  mutation routerRoleBulk($param: [RouterRoleSaveIn]!) {\n    routerRoleBulk(param: $param)\n  }\n`;\nexport type RouterRoleBulkMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterRoleBulkMutation,\n  SchemaTypes.RouterRoleBulkMutationVariables\n>;\n\n/**\n * __useRouterRoleBulkMutation__\n *\n * To run a mutation, you first call `useRouterRoleBulkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterRoleBulkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerRoleBulkMutation, { data, loading, error }] = useRouterRoleBulkMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRouterRoleBulkMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterRoleBulkMutation,\n    SchemaTypes.RouterRoleBulkMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterRoleBulkMutation,\n    SchemaTypes.RouterRoleBulkMutationVariables\n  >(RouterRoleBulkDocument, options);\n}\nexport type RouterRoleBulkMutationHookResult = ReturnType<\n  typeof useRouterRoleBulkMutation\n>;\nexport type RouterRoleBulkMutationResult = Apollo.MutationResult<SchemaTypes.RouterRoleBulkMutation>;\nexport type RouterRoleBulkMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterRoleBulkMutation,\n  SchemaTypes.RouterRoleBulkMutationVariables\n>;\nexport const RouterRoleDestroyDocument = gql`\n  mutation routerRoleDestroy($where: JSONObject!) {\n    routerRoleDestroy(where: $where)\n  }\n`;\nexport type RouterRoleDestroyMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterRoleDestroyMutation,\n  SchemaTypes.RouterRoleDestroyMutationVariables\n>;\n\n/**\n * __useRouterRoleDestroyMutation__\n *\n * To run a mutation, you first call `useRouterRoleDestroyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterRoleDestroyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerRoleDestroyMutation, { data, loading, error }] = useRouterRoleDestroyMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useRouterRoleDestroyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterRoleDestroyMutation,\n    SchemaTypes.RouterRoleDestroyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterRoleDestroyMutation,\n    SchemaTypes.RouterRoleDestroyMutationVariables\n  >(RouterRoleDestroyDocument, options);\n}\nexport type RouterRoleDestroyMutationHookResult = ReturnType<\n  typeof useRouterRoleDestroyMutation\n>;\nexport type RouterRoleDestroyMutationResult = Apollo.MutationResult<SchemaTypes.RouterRoleDestroyMutation>;\nexport type RouterRoleDestroyMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterRoleDestroyMutation,\n  SchemaTypes.RouterRoleDestroyMutationVariables\n>;\nexport const FindRouterListDocument = gql`\n  query findRouterList($param: QueryListParam) {\n    routerAll(param: $param) {\n      ...Router\n    }\n    routerCount(param: $param)\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterListQuery__\n *\n * To run a query within a React component, call `useFindRouterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterListQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterListQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >(FindRouterListDocument, options);\n}\nexport function useFindRouterListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterListQuery,\n    SchemaTypes.FindRouterListQueryVariables\n  >(FindRouterListDocument, options);\n}\nexport type FindRouterListQueryHookResult = ReturnType<\n  typeof useFindRouterListQuery\n>;\nexport type FindRouterListLazyQueryHookResult = ReturnType<\n  typeof useFindRouterListLazyQuery\n>;\nexport type FindRouterListQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterListQuery,\n  SchemaTypes.FindRouterListQueryVariables\n>;\nexport const FindRouteByParentIdDocument = gql`\n  query findRouteByParentId($parentId: String) {\n    routerAll(param: { where: { parentId: $parentId } }) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouteByParentIdQuery__\n *\n * To run a query within a React component, call `useFindRouteByParentIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouteByParentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouteByParentIdQuery({\n *   variables: {\n *      parentId: // value for 'parentId'\n *   },\n * });\n */\nexport function useFindRouteByParentIdQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >(FindRouteByParentIdDocument, options);\n}\nexport function useFindRouteByParentIdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouteByParentIdQuery,\n    SchemaTypes.FindRouteByParentIdQueryVariables\n  >(FindRouteByParentIdDocument, options);\n}\nexport type FindRouteByParentIdQueryHookResult = ReturnType<\n  typeof useFindRouteByParentIdQuery\n>;\nexport type FindRouteByParentIdLazyQueryHookResult = ReturnType<\n  typeof useFindRouteByParentIdLazyQuery\n>;\nexport type FindRouteByParentIdQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouteByParentIdQuery,\n  SchemaTypes.FindRouteByParentIdQueryVariables\n>;\nexport const FindRouteTopDocument = gql`\n  query findRouteTop {\n    routerAll(param: { where: { parentId: { _is: null } } }) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouteTopQuery__\n *\n * To run a query within a React component, call `useFindRouteTopQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouteTopQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouteTopQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFindRouteTopQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >(FindRouteTopDocument, options);\n}\nexport function useFindRouteTopLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouteTopQuery,\n    SchemaTypes.FindRouteTopQueryVariables\n  >(FindRouteTopDocument, options);\n}\nexport type FindRouteTopQueryHookResult = ReturnType<\n  typeof useFindRouteTopQuery\n>;\nexport type FindRouteTopLazyQueryHookResult = ReturnType<\n  typeof useFindRouteTopLazyQuery\n>;\nexport type FindRouteTopQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouteTopQuery,\n  SchemaTypes.FindRouteTopQueryVariables\n>;\nexport const FindRouterDocument = gql`\n  query findRouter($id: ID!) {\n    router(id: $id) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterQuery__\n *\n * To run a query within a React component, call `useFindRouterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindRouterQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >(FindRouterDocument, options);\n}\nexport function useFindRouterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterQuery,\n    SchemaTypes.FindRouterQueryVariables\n  >(FindRouterDocument, options);\n}\nexport type FindRouterQueryHookResult = ReturnType<typeof useFindRouterQuery>;\nexport type FindRouterLazyQueryHookResult = ReturnType<\n  typeof useFindRouterLazyQuery\n>;\nexport type FindRouterQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterQuery,\n  SchemaTypes.FindRouterQueryVariables\n>;\nexport const FindRouterAllDocument = gql`\n  query findRouterAll($param: QueryListParam) {\n    routerAll(param: $param) {\n      ...Router\n    }\n  }\n  ${RouterFragmentDoc}\n`;\n\n/**\n * __useFindRouterAllQuery__\n *\n * To run a query within a React component, call `useFindRouterAllQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindRouterAllQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindRouterAllQuery({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useFindRouterAllQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >(FindRouterAllDocument, options);\n}\nexport function useFindRouterAllLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    SchemaTypes.FindRouterAllQuery,\n    SchemaTypes.FindRouterAllQueryVariables\n  >(FindRouterAllDocument, options);\n}\nexport type FindRouterAllQueryHookResult = ReturnType<\n  typeof useFindRouterAllQuery\n>;\nexport type FindRouterAllLazyQueryHookResult = ReturnType<\n  typeof useFindRouterAllLazyQuery\n>;\nexport type FindRouterAllQueryResult = Apollo.QueryResult<\n  SchemaTypes.FindRouterAllQuery,\n  SchemaTypes.FindRouterAllQueryVariables\n>;\nexport const RouterDestroyByIdDocument = gql`\n  mutation routerDestroyById($id: String!) {\n    routerDestroyById(id: $id)\n  }\n`;\nexport type RouterDestroyByIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterDestroyByIdMutation,\n  SchemaTypes.RouterDestroyByIdMutationVariables\n>;\n\n/**\n * __useRouterDestroyByIdMutation__\n *\n * To run a mutation, you first call `useRouterDestroyByIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterDestroyByIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerDestroyByIdMutation, { data, loading, error }] = useRouterDestroyByIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRouterDestroyByIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterDestroyByIdMutation,\n    SchemaTypes.RouterDestroyByIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterDestroyByIdMutation,\n    SchemaTypes.RouterDestroyByIdMutationVariables\n  >(RouterDestroyByIdDocument, options);\n}\nexport type RouterDestroyByIdMutationHookResult = ReturnType<\n  typeof useRouterDestroyByIdMutation\n>;\nexport type RouterDestroyByIdMutationResult = Apollo.MutationResult<SchemaTypes.RouterDestroyByIdMutation>;\nexport type RouterDestroyByIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterDestroyByIdMutation,\n  SchemaTypes.RouterDestroyByIdMutationVariables\n>;\nexport const RouterDocument = gql`\n  mutation router($param: RouterSaveIn!) {\n    router(param: $param)\n  }\n`;\nexport type RouterMutationFn = Apollo.MutationFunction<\n  SchemaTypes.RouterMutation,\n  SchemaTypes.RouterMutationVariables\n>;\n\n/**\n * __useRouterMutation__\n *\n * To run a mutation, you first call `useRouterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRouterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [routerMutation, { data, loading, error }] = useRouterMutation({\n *   variables: {\n *      param: // value for 'param'\n *   },\n * });\n */\nexport function useRouterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.RouterMutation,\n    SchemaTypes.RouterMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.RouterMutation,\n    SchemaTypes.RouterMutationVariables\n  >(RouterDocument, options);\n}\nexport type RouterMutationHookResult = ReturnType<typeof useRouterMutation>;\nexport type RouterMutationResult = Apollo.MutationResult<SchemaTypes.RouterMutation>;\nexport type RouterMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.RouterMutation,\n  SchemaTypes.RouterMutationVariables\n>;\nexport const UpdRouterParentIdDocument = gql`\n  mutation updRouterParentId($id: ID!, $parentId: String) {\n    router(param: { id: $id, parentId: $parentId })\n  }\n`;\nexport type UpdRouterParentIdMutationFn = Apollo.MutationFunction<\n  SchemaTypes.UpdRouterParentIdMutation,\n  SchemaTypes.UpdRouterParentIdMutationVariables\n>;\n\n/**\n * __useUpdRouterParentIdMutation__\n *\n * To run a mutation, you first call `useUpdRouterParentIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdRouterParentIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updRouterParentIdMutation, { data, loading, error }] = useUpdRouterParentIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *      parentId: // value for 'parentId'\n *   },\n * });\n */\nexport function useUpdRouterParentIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SchemaTypes.UpdRouterParentIdMutation,\n    SchemaTypes.UpdRouterParentIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SchemaTypes.UpdRouterParentIdMutation,\n    SchemaTypes.UpdRouterParentIdMutationVariables\n  >(UpdRouterParentIdDocument, options);\n}\nexport type UpdRouterParentIdMutationHookResult = ReturnType<\n  typeof useUpdRouterParentIdMutation\n>;\nexport type UpdRouterParentIdMutationResult = Apollo.MutationResult<SchemaTypes.UpdRouterParentIdMutation>;\nexport type UpdRouterParentIdMutationOptions = Apollo.BaseMutationOptions<\n  SchemaTypes.UpdRouterParentIdMutation,\n  SchemaTypes.UpdRouterParentIdMutationVariables\n>;\n","import { DocumentNode } from 'graphql';\nimport i18n from '../plugins/i18next';\nimport {\n  get,\n  isString,\n  toString,\n  isArray,\n  difference,\n  keys,\n  set,\n  toInteger,\n  find,\n} from 'lodash';\nimport { ColumnType } from 'antd/lib/table';\nimport {\n  Tooltip,\n  Input,\n  Space,\n  Button,\n  notification,\n  PageHeader,\n  message,\n} from 'antd';\nimport { produce } from 'immer';\nimport {\n  FilterDropdownProps,\n  SorterResult,\n  SortOrder,\n  TablePaginationConfig,\n} from 'antd/lib/table/interface';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport {\n  SearchOutlined,\n  CloseCircleOutlined,\n  WarningOutlined,\n  ExclamationCircleOutlined,\n  RedoOutlined,\n  SettingOutlined,\n  ColumnHeightOutlined,\n} from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\nimport { useImmer } from 'use-immer';\nimport { ProColumns, ProColumnType } from '@ant-design/pro-table';\n\n// #region table helper\nexport type WhereType =\n  | '_like'\n  | '_between'\n  | '_gte'\n  | '_gt'\n  | '_lt'\n  | '_lte'\n  | '_eq'\n  | '_not';\nexport interface ITablePagination {\n  current: number;\n  pageSize: number;\n  order: Maybe<string[][]>;\n  filters: Maybe<Object>;\n}\n\n/**\n * 根据table filters 转化为 where\n * @param keysFilter\n * @param whereType\n * @returns\n */\nexport const filtersToWhere = <T,>(\n  keysFilter: Maybe<Object[]>,\n  whereType: {\n    [p in keyof T]: WhereType;\n  }\n): Maybe<Object> => {\n  if (!keysFilter) {\n    return undefined;\n  }\n  const where = {};\n  keysFilter.forEach((k) => {\n    keys(k)\n      .filter((p) => get(k, p) && !['current', 'pageSize'].includes(p))\n      .forEach((p) => {\n        let value = get(k, p);\n        if (isArray(value) && value.length === 1) {\n          value = value[0];\n        }\n        const whereItem = get(whereType, p);\n        if (whereItem === '_like') {\n          value = `%${value}%`;\n        }\n        set(where, p, whereItem ? { [whereItem]: value } : value);\n      });\n  });\n  return where;\n};\n\nexport const localChange = <T,>(\n  dataSource: Maybe<Array<any>>,\n  pagination: TablePaginationConfig,\n  filters: Record<string, (boolean | React.Key)[] | null>,\n  sorter: SorterResult<T> | SorterResult<T>[],\n  whereType?: {\n    [p in keyof T]: WhereType;\n  }\n) => {\n  const fkey = keys(filters).filter((p) => filters[p]);\n  return dataSource?.filter((p) => {\n    const item = find(fkey, (k) => {\n      const value = toString((get(filters, k) as Array<string>)[0]);\n      const source = toString(get(p, k));\n      // 求反 如果存在则过滤掉\n      if (!get(whereType, k) || ['_eq', '_like'].includes(get(whereType, k))) {\n        return !source.includes(value);\n      } else if (!get(whereType, k) || get(whereType, k) === '_not') {\n        return source.includes(value);\n      }\n    });\n    return item === undefined;\n  });\n};\n\n/**\n * 根据查询类型反向生成列\n * @param param\n * @returns\n */\nexport const generatorColumns = <T,>(\n  documentNode: DocumentNode,\n  setColumns?: Array<ColumnType<T>>,\n  delColumns?: Array<keyof T>\n): (ProColumns<T> | ColumnType<T>)[] => {\n  let stringList = findFragmentDefinition<T>(documentNode);\n  if (delColumns) {\n    stringList = difference(stringList, delColumns as any);\n  }\n  if (setColumns) {\n    stringList = changeColumns(\n      stringList as Array<keyof T | ColumnType<T>>,\n      setColumns\n    );\n  }\n  return createColumns<T>(...stringList);\n};\n\n/**\n * 根据operation生成columns array\n * @param documentNode\n * @returns\n */\nexport const findFragmentDefinition = <T,>(\n  documentNode: DocumentNode\n): Array<keyof T | ColumnType<T>> => {\n  const definitionNode = documentNode.definitions.find(\n    (p) => p.kind === 'FragmentDefinition'\n  );\n  if (!definitionNode) {\n    throw new Error('没有找到[FragmentDefinition]请确认！');\n  }\n  const value = get(definitionNode, 'selectionSet.selections');\n  return value?.map((p: any) => get(p, 'name.value'));\n};\n\n/**\n * 修正类型\n * @param columns\n * @param setState\n * @returns\n */\nexport const changeColumns = <T,>(\n  columns: Array<keyof T | ColumnType<T>>,\n  setState: Array<ColumnType<T>>\n): Array<keyof T | ColumnType<T>> => {\n  return produce(columns, (draft) => {\n    setState.forEach((p) => {\n      const inc = draft.findIndex((x) => x === p.key);\n      inc > -1 ? (draft[inc] = p as any) : draft.push(p as any);\n    });\n  });\n};\n\nconst columnsDefault = <T,>(key: string): ProColumnType<T> | ColumnType<T> => {\n  return {\n    title: i18n.t(key.toString()),\n    dataIndex: key.toString(),\n    sorter: true,\n    key: key.toString(),\n  };\n};\n\nconst columnsTypeDefault = <T,>(\n  col: ColumnType<T>\n): ProColumnType<T> | ColumnType<T> => {\n  return {\n    title: i18n.t(toString(col.title || col.key)),\n    dataIndex: toString(col.key),\n    sorter: true,\n    ...col,\n  };\n};\n\n/**\n * 自动生成列\n * @param key to dataIndex\n * @returns\n */\nexport const createColumns = <T,>(\n  ...key: Array<keyof T | ColumnType<T>>\n): (ProColumns<T> | ColumnType<T>)[] =>\n  key.map((p) =>\n    isString(p) ? columnsDefault<T>(p) : columnsTypeDefault(p as ColumnType<T>)\n  );\n\n/**\n * ellipsis title to tooltip\n * @returns\n */\nexport const defaultEllipsis = {\n  ellipsis: {\n    showTitle: false,\n  },\n  render: (value: any) => (\n    <Tooltip placement=\"topLeft\" title={value}>\n      {value}\n    </Tooltip>\n  ),\n};\n\n/**\n * table sort 转 order\n * @param sorter\n */\nexport const sortToOrder = <T,>(\n  sorter: SorterResult<T> | SorterResult<T>[]\n): Maybe<string[][]> => {\n  if (!isArray(sorter) && !sorter.order) {\n    return undefined;\n  }\n  const sorterList = isArray(sorter) ? sorter : [sorter];\n  return sorterList\n    .filter((p) => p.columnKey)\n    .map((p) => [toString(p.columnKey), 'ascend' === p.order ? 'ASC' : 'DESC']);\n};\n\n/**\n * pro tbale sort\n * @param sort\n */\nexport const proSortToOrder = (sort: Record<string, SortOrder>) => {\n  if (!sort) {\n    return undefined;\n  }\n  const keystrings = keys(sort);\n  if (keystrings.length <= 0) {\n    return undefined;\n  }\n  return [\n    [keystrings[0], 'ascend' === get(sort, keystrings[0]) ? 'ASC' : 'DESC'],\n  ];\n};\n\nexport interface IKeysFilter {\n  dataIndex: string;\n  searchValue: Maybe<(string | Date | Object)[]>;\n  queryItem: Maybe<Object>;\n}\n\n/**\n * 自定义模糊筛选菜单\n */\nexport const getColumnSearch = <T,>(dataIndex?: keyof T) => {\n  /**\n   * 文本控件\n   */\n  let refSearchInput: Maybe<Input> = undefined;\n  return {\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n      filters,\n    }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => (refSearchInput = node)}\n          placeholder={`${i18n.t('fuzzyMatching')}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() => {\n            console.log(selectedKeys);\n            confirm();\n          }}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => confirm()}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            {i18n.t('search')}\n          </Button>\n          <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\n            {i18n.t('reset')}\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => confirm({ closeDropdown: false })}\n          >\n            {i18n.t('filter')}\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: any) => (\n      <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilterDropdownVisibleChange: (visible: any) =>\n      visible && setTimeout(() => refSearchInput?.select(), 100),\n    // 自定义列render\n    render: (text: string) => {\n      if (refSearchInput) {\n        return (\n          <Highlighter\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n            searchWords={[get(refSearchInput, 'props.value')]}\n            autoEscape\n            textToHighlight={text ? text.toString() : ''}\n          />\n        );\n      } else {\n        return text;\n      }\n    },\n  };\n};\n\n/**\n * 判断当前页码\n * @param total\n * @param current\n * @param pageSize\n * @param delNum 删除数量\n * @returns\n */\nexport const calcCurrent = (\n  total: Maybe<number>,\n  current: number = 1,\n  pageSize: number = 10,\n  delNum: number = 0\n): number => {\n  let currentDiff = Math.floor(\n    ((total || 0) + pageSize - 1 - delNum) / pageSize\n  );\n  if (currentDiff > current) {\n    return current || 1;\n  }\n  return currentDiff || 1;\n};\n\n/**\n * use分页hook\n * @param paginationParam\n * @param whereModel\n * @returns\n */\nexport function usePagination(\n  whereModel: any,\n  paginationParam: ITablePagination = {\n    current: 1,\n    pageSize: 10,\n    order: undefined,\n    filters: undefined,\n  }\n) {\n  const [pagination, setPagination] = useImmer<ITablePagination>({\n    ...paginationParam,\n  });\n\n  const handleTableChange = (\n    pagination: TablePaginationConfig,\n    filters: Record<string, (boolean | React.Key)[] | null>,\n    sorter: SorterResult<any> | SorterResult<any>[]\n  ) => {\n    setPagination((draft) => {\n      draft.current = toInteger(pagination.current);\n      draft.pageSize = toInteger(pagination.pageSize);\n      draft.order = sortToOrder(sorter);\n      draft.filters = filtersToWhere([filters], whereModel);\n    });\n  };\n  return { pagination, handleTableChange };\n}\n/**\n * table header\n * @returns\n */\nexport function tableheaderComponent() {\n  return (\n    <PageHeader\n      className=\"site-page-header\"\n      extra={[\n        <Button key=\"add\" type=\"primary\">\n          {i18n.t('add')}\n        </Button>,\n        <Tooltip title={i18n.t('refetch')}>\n          <Button style={{ border: 0 }} icon={<RedoOutlined />} />\n        </Tooltip>,\n        <Tooltip title={i18n.t('density')}>\n          <Button style={{ border: 0 }} icon={<ColumnHeightOutlined />} />\n        </Tooltip>,\n        <Tooltip title={i18n.t('setting')}>\n          <Button style={{ border: 0 }} icon={<SettingOutlined />} />\n        </Tooltip>,\n      ]}\n    />\n  );\n}\n// #endregion\n\n// #region 控件默认值\nexport const defaultPagination = {\n  hideOnSinglePage: true,\n  showSizeChanger: true,\n  showQuickJumper: true,\n};\n// #endregion\n\n// #region error\nexport const gqlErrorMessage = (error: any) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    error?.networkError?.statusCode === 400\n  ) {\n    return message.error(\n      Array.from(\n        new Set(\n          get(error, 'networkError.result.errors').map((p: any) => p.message)\n        )\n      ).join('\\r\\n')\n    );\n  }\n  return message.error(error.message || error.networkError.message);\n};\n// #endregion\n\n// #region Notification helper\n/**\n * error 错误提示\n */\nexport const openNotification = (\n  title: string,\n  message: string,\n  type: 'error' | 'warning' | 'message' = 'error'\n) => {\n  let icon = <CloseCircleOutlined />;\n  if (type === 'warning') {\n    icon = <WarningOutlined />;\n  } else if (type === 'message') {\n    icon = <ExclamationCircleOutlined />;\n  }\n  notification.open({\n    message: title,\n    description: message,\n    icon,\n  });\n};\n// #endregion\n","import i18n from '../plugins/i18next';\n\nexport const APP_NAME = {\n  'midway-refined-platform': i18n.t('midway-refined-platform'),\n  'midway-integral-recycling': i18n.t('midway-integral-recycling'),\n};\n"],"sourceRoot":""}